'use strict';

function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
function each(items, fn) {
    let str = '';
    for (let i = 0; i < items.length; i += 1) {
        str += fn(items[i], i);
    }
    return str;
}
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(parent_component ? parent_component.$$.context : []),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, options = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, options);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || (boolean && !value))
        return '';
    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}

/* src/Toolbar.svelte generated by Svelte v3.29.0 */

const css = {
	code: ".toolbar.svelte-1f1x93n{margin-bottom:2em}button.svelte-1f1x93n{cursor:pointer}",
	map: "{\"version\":3,\"file\":\"Toolbar.svelte\",\"sources\":[\"Toolbar.svelte\"],\"sourcesContent\":[\"<script>\\n  import { createEventDispatcher } from 'svelte';\\n  const dispatch = createEventDispatcher();\\n\\n  export let actions = ['reset', 'reveal'];\\n</script>\\n\\n<div class=\\\"toolbar\\\">\\n  {#each actions as action}\\n    {#if action == 'reset'}\\n      <button on:click=\\\"{() => dispatch('event', 'reset')}\\\">Reset</button>\\n    {:else if action == 'reveal'}\\n      <button on:click=\\\"{() => dispatch('event', 'reveal')}\\\">Reveal</button>\\n    {/if}\\n  {/each}\\n</div>\\n\\n<style>\\n  .toolbar {\\n    margin-bottom: 2em;\\n  }\\n  button {\\n    cursor: pointer;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAkBE,QAAQ,eAAC,CAAC,AACR,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,OAAO,AACjB,CAAC\"}"
};

const Toolbar = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	const dispatch = createEventDispatcher();
	let { actions = ["reset", "reveal"] } = $$props;
	if ($$props.actions === void 0 && $$bindings.actions && actions !== void 0) $$bindings.actions(actions);
	$$result.css.add(css);

	return `<div class="${"toolbar svelte-1f1x93n"}">${each(actions, action => `${action == "reset"
	? `<button class="${"svelte-1f1x93n"}">Reset</button>`
	: `${action == "reveal"
		? `<button class="${"svelte-1f1x93n"}">Reveal</button>`
		: ``}`}`)}
</div>`;
});

var getSecondarilyFocusedCells = ({ cells, focusedDirection, focusedCell }) => {
  const dimension = focusedDirection == "across" ? "x" : "y";
  const otherDimension = focusedDirection == "across" ? "y" : "x";
  const start = focusedCell[dimension];

  const cellsWithDiff = cells
    .filter(
      (cell) =>
        // take out cells in other columns/rows
        cell[otherDimension] == focusedCell[otherDimension]
    )
    .map((cell) => ({
      ...cell,
      // how far is this cell from our focused cell?
      diff: start - cell[dimension],
    }));
    
	cellsWithDiff.sort((a, b) => a.diff - b.diff);

  // highlight all cells in same row/column, without any breaks
  const diffs = cellsWithDiff.map((d) => d.diff);
  const indices = range(Math.min(...diffs), Math.max(...diffs)).map((i) =>
    diffs.includes(i) ? i : " "
  );
  const chunks = indices.join(",").split(", ,");
  const currentChunk = (
    chunks.find(
      (d) => d.startsWith("0,") || d.endsWith(",0") || d.includes(",0,")
    ) || ""
  )
    .split(",")
    .map((d) => +d);

  const secondarilyFocusedCellIndices = cellsWithDiff
    .filter((cell) => currentChunk.includes(cell.diff))
    .map((cell) => cell.index);
  return secondarilyFocusedCellIndices;
};

const range = (min, max) =>
  Array.from({ length: max - min + 1 }, (v, k) => k + min);

var getCellAfterDiff = ({ diff, cells, direction, focusedCell }) => {
  const dimension = direction == "across" ? "x" : "y";
  const otherDimension = direction == "across" ? "y" : "x";
  const start = focusedCell[dimension];
  const absDiff = Math.abs(diff);
  const isDiffNegative = diff < 0;

  const cellsWithDiff = cells
    .filter(
      (cell) =>
        // take out cells in other columns/rows
        cell[otherDimension] == focusedCell[otherDimension] &&
        // take out cells in wrong direction
        (isDiffNegative ? cell[dimension] < start : cell[dimension] > start)
    )
    .map((cell) => ({
      ...cell,
      // how far is this cell from our focused cell?
      absDiff: Math.abs(start - cell[dimension]),
    }));

  cellsWithDiff.sort((a, b) => a.absDiff - b.absDiff);
  return cellsWithDiff[absDiff - 1];
};

/* src/Cell.svelte generated by Svelte v3.29.0 */

const css$1 = {
	code: "g.svelte-1fqxzxj.svelte-1fqxzxj{cursor:pointer;user-select:none}g.svelte-1fqxzxj.svelte-1fqxzxj:focus{outline:none}g.is-secondarily-focused.svelte-1fqxzxj rect.svelte-1fqxzxj{fill:var(--cell-secondary-color, #ffec99)}g.is-focused.svelte-1fqxzxj rect.svelte-1fqxzxj{fill:var(--cell-highlight-color, #ffcc00)}rect.svelte-1fqxzxj.svelte-1fqxzxj{transition:fill 0.1s ease-out}text.svelte-1fqxzxj.svelte-1fqxzxj{pointer-events:none;line-height:1;fill:var(--cell-text-color, #1a1a1a)}.value.svelte-1fqxzxj.svelte-1fqxzxj{font-size:var(--cell-font-size, 0.7em);font-weight:var(--cell-font-weight, 700)}.number.svelte-1fqxzxj.svelte-1fqxzxj{font-size:var(--number-font-size, 0.3em);font-weight:var(--number-font-weight, 300);fill:var(--number-color, #8a8a8a)}rect.svelte-1fqxzxj.svelte-1fqxzxj{fill:var(--cell-bg-color, #fff);stroke:var(--cell-border-color, #1a1a1a);stroke-width:var(--cell-border-width, 0.01)}",
	map: "{\"version\":3,\"file\":\"Cell.svelte\",\"sources\":[\"Cell.svelte\"],\"sourcesContent\":[\"<script>\\n  export let x;\\n  export let y;\\n  export let value;\\n  export let number;\\n  export let index;\\n  export let custom;\\n  export let changeDelay = 0;\\n  export let isRevealing = false;\\n  export let isFocused = false;\\n  export let isSecondarilyFocused = false;\\n  export let onFocusCell = () => {};\\n  export let onCellUpdate = () => {};\\n  export let onFocusClueDiff = () => {};\\n  export let onMoveFocus = () => {};\\n  export let onFlipDirection = () => {};\\n  export let onHistoricalChange = () => {};\\n\\n  let element;\\n\\n  const onFocusSelf = () => {\\n    if (!element) return;\\n    if (isFocused) element.focus();\\n  };\\n\\n  $: isFocused, onFocusSelf();\\n\\n  const onKeydown = (e) => {\\n    if (e.ctrlKey && e.key.toLowerCase() == \\\"z\\\") {\\n      onHistoricalChange(e.shiftKey ? 1 : -1);\\n    }\\n\\n    if (e.ctrlKey) return;\\n    if (e.altKey) return;\\n\\n    if (e.key === \\\"Tab\\\") {\\n      onFocusClueDiff(e.shiftKey ? -1 : 1);\\n      e.preventDefault();\\n      e.stopPropagation();\\n      return;\\n    }\\n\\n    if (e.key == \\\" \\\") {\\n      onFlipDirection();\\n      e.preventDefault();\\n      e.stopPropagation();\\n      return;\\n    }\\n\\n    if ([\\\"Delete\\\", \\\"Backspace\\\"].includes(e.key)) {\\n      onCellUpdate(index, \\\"\\\", -1);\\n      return;\\n    }\\n\\n    const isKeyInAlphabet = /^[a-zA-Z()]$/.test(e.key);\\n    if (isKeyInAlphabet) {\\n      onCellUpdate(index, e.key.toUpperCase());\\n      return;\\n    }\\n\\n    const diff = {\\n      ArrowLeft: [\\\"across\\\", -1],\\n      ArrowRight: [\\\"across\\\", 1],\\n      ArrowUp: [\\\"down\\\", -1],\\n      ArrowDown: [\\\"down\\\", 1],\\n    }[e.key];\\n    if (diff) {\\n      onMoveFocus(...diff);\\n      e.preventDefault();\\n      e.stopPropagation();\\n      return;\\n    }\\n  };\\n  const onClick = () => {\\n    onFocusCell(index);\\n  };\\n\\n  const pop = (node, { delay = 0, duration = 200 }) => ({\\n    delay,\\n    duration,\\n    css: (t) =>\\n      [\\n        `transform: translate(0, ${1 - t}px)`, //\\n      ].join(\\\";\\\"),\\n  });\\n</script>\\n\\n<!-- <svelte:window on:keydown={onKeydown} /> -->\\n\\n<g\\n  class=\\\"cell {custom}\\\"\\n  class:is-focused=\\\"{isFocused}\\\"\\n  class:is-secondarily-focused=\\\"{isSecondarilyFocused}\\\"\\n  transform=\\\"{`translate(${x}, ${y})`}\\\"\\n  id=\\\"cell-{x}-{y}\\\"\\n  tabIndex=\\\"0\\\"\\n  on:click=\\\"{onClick}\\\"\\n  on:keydown=\\\"{onKeydown}\\\"\\n  bind:this=\\\"{element}\\\">\\n  <rect width=\\\"1\\\" height=\\\"1\\\"></rect>\\n  {#if value}\\n    <text\\n      transition:pop=\\\"{{ y: 6, delay: changeDelay, duration: isRevealing ? 200 : 0 }}\\\"\\n      class=\\\"value\\\"\\n      x=\\\"0.5\\\"\\n      y=\\\"0.9\\\"\\n      dominant-baseline=\\\"auto\\\"\\n      text-anchor=\\\"middle\\\">\\n      {value}\\n    </text>\\n  {/if}\\n  <text\\n    class=\\\"number\\\"\\n    x=\\\"0.1\\\"\\n    y=\\\"0.1\\\"\\n    dominant-baseline=\\\"hanging\\\"\\n    text-anchor=\\\"start\\\">\\n    {number}\\n  </text>\\n</g>\\n\\n<style>\\n  g {\\n    cursor: pointer;\\n    user-select: none;\\n  }\\n\\n  g:focus {\\n    outline: none;\\n  }\\n\\n  g.is-secondarily-focused rect {\\n    fill: var(--cell-secondary-color, #ffec99);\\n  }\\n\\n  g.is-focused rect {\\n    fill: var(--cell-highlight-color, #ffcc00);\\n  }\\n\\n  rect {\\n    transition: fill 0.1s ease-out;\\n  }\\n\\n  text {\\n    pointer-events: none;\\n    line-height: 1;\\n    fill: var(--cell-text-color, #1a1a1a);\\n  }\\n\\n  .value {\\n    font-size: var(--cell-font-size, 0.7em);\\n    font-weight: var(--cell-font-weight, 700);\\n  }\\n\\n  .number {\\n    font-size: var(--number-font-size, 0.3em);\\n    font-weight: var(--number-font-weight, 300);\\n    fill: var(--number-color, #8a8a8a);\\n  }\\n\\n  rect {\\n    fill: var(--cell-bg-color, #fff);\\n    stroke: var(--cell-border-color, #1a1a1a);\\n    stroke-width: var(--cell-border-width, 0.01);\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AA0HE,CAAC,8BAAC,CAAC,AACD,MAAM,CAAE,OAAO,CACf,WAAW,CAAE,IAAI,AACnB,CAAC,AAED,+BAAC,MAAM,AAAC,CAAC,AACP,OAAO,CAAE,IAAI,AACf,CAAC,AAED,CAAC,sCAAuB,CAAC,IAAI,eAAC,CAAC,AAC7B,IAAI,CAAE,IAAI,sBAAsB,CAAC,QAAQ,CAAC,AAC5C,CAAC,AAED,CAAC,0BAAW,CAAC,IAAI,eAAC,CAAC,AACjB,IAAI,CAAE,IAAI,sBAAsB,CAAC,QAAQ,CAAC,AAC5C,CAAC,AAED,IAAI,8BAAC,CAAC,AACJ,UAAU,CAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,AAChC,CAAC,AAED,IAAI,8BAAC,CAAC,AACJ,cAAc,CAAE,IAAI,CACpB,WAAW,CAAE,CAAC,CACd,IAAI,CAAE,IAAI,iBAAiB,CAAC,QAAQ,CAAC,AACvC,CAAC,AAED,MAAM,8BAAC,CAAC,AACN,SAAS,CAAE,IAAI,gBAAgB,CAAC,MAAM,CAAC,CACvC,WAAW,CAAE,IAAI,kBAAkB,CAAC,IAAI,CAAC,AAC3C,CAAC,AAED,OAAO,8BAAC,CAAC,AACP,SAAS,CAAE,IAAI,kBAAkB,CAAC,MAAM,CAAC,CACzC,WAAW,CAAE,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAC3C,IAAI,CAAE,IAAI,cAAc,CAAC,QAAQ,CAAC,AACpC,CAAC,AAED,IAAI,8BAAC,CAAC,AACJ,IAAI,CAAE,IAAI,eAAe,CAAC,KAAK,CAAC,CAChC,MAAM,CAAE,IAAI,mBAAmB,CAAC,QAAQ,CAAC,CACzC,YAAY,CAAE,IAAI,mBAAmB,CAAC,KAAK,CAAC,AAC9C,CAAC\"}"
};

const Cell = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { x } = $$props;
	let { y } = $$props;
	let { value } = $$props;
	let { number } = $$props;
	let { index } = $$props;
	let { custom } = $$props;
	let { changeDelay = 0 } = $$props;
	let { isRevealing = false } = $$props;
	let { isFocused = false } = $$props;
	let { isSecondarilyFocused = false } = $$props;

	let { onFocusCell = () => {
		
	} } = $$props;

	let { onCellUpdate = () => {
		
	} } = $$props;

	let { onFocusClueDiff = () => {
		
	} } = $$props;

	let { onMoveFocus = () => {
		
	} } = $$props;

	let { onFlipDirection = () => {
		
	} } = $$props;

	let { onHistoricalChange = () => {
		
	} } = $$props;

	let element;

	if ($$props.x === void 0 && $$bindings.x && x !== void 0) $$bindings.x(x);
	if ($$props.y === void 0 && $$bindings.y && y !== void 0) $$bindings.y(y);
	if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
	if ($$props.number === void 0 && $$bindings.number && number !== void 0) $$bindings.number(number);
	if ($$props.index === void 0 && $$bindings.index && index !== void 0) $$bindings.index(index);
	if ($$props.custom === void 0 && $$bindings.custom && custom !== void 0) $$bindings.custom(custom);
	if ($$props.changeDelay === void 0 && $$bindings.changeDelay && changeDelay !== void 0) $$bindings.changeDelay(changeDelay);
	if ($$props.isRevealing === void 0 && $$bindings.isRevealing && isRevealing !== void 0) $$bindings.isRevealing(isRevealing);
	if ($$props.isFocused === void 0 && $$bindings.isFocused && isFocused !== void 0) $$bindings.isFocused(isFocused);
	if ($$props.isSecondarilyFocused === void 0 && $$bindings.isSecondarilyFocused && isSecondarilyFocused !== void 0) $$bindings.isSecondarilyFocused(isSecondarilyFocused);
	if ($$props.onFocusCell === void 0 && $$bindings.onFocusCell && onFocusCell !== void 0) $$bindings.onFocusCell(onFocusCell);
	if ($$props.onCellUpdate === void 0 && $$bindings.onCellUpdate && onCellUpdate !== void 0) $$bindings.onCellUpdate(onCellUpdate);
	if ($$props.onFocusClueDiff === void 0 && $$bindings.onFocusClueDiff && onFocusClueDiff !== void 0) $$bindings.onFocusClueDiff(onFocusClueDiff);
	if ($$props.onMoveFocus === void 0 && $$bindings.onMoveFocus && onMoveFocus !== void 0) $$bindings.onMoveFocus(onMoveFocus);
	if ($$props.onFlipDirection === void 0 && $$bindings.onFlipDirection && onFlipDirection !== void 0) $$bindings.onFlipDirection(onFlipDirection);
	if ($$props.onHistoricalChange === void 0 && $$bindings.onHistoricalChange && onHistoricalChange !== void 0) $$bindings.onHistoricalChange(onHistoricalChange);
	$$result.css.add(css$1);

	return `

<g class="${[
		"cell " + escape(custom) + " svelte-1fqxzxj",
		(isFocused ? "is-focused" : "") + " " + (isSecondarilyFocused ? "is-secondarily-focused" : "")
	].join(" ").trim()}"${add_attribute("transform", `translate(${x}, ${y})`, 0)} id="${"cell-" + escape(x) + "-" + escape(y)}" tabIndex="${"0"}"${add_attribute("this", element, 1)}><rect width="${"1"}" height="${"1"}" class="${"svelte-1fqxzxj"}"></rect>${value
	? `<text class="${"value svelte-1fqxzxj"}" x="${"0.5"}" y="${"0.9"}" dominant-baseline="${"auto"}" text-anchor="${"middle"}">${escape(value)}</text>`
	: ``}<text class="${"number svelte-1fqxzxj"}" x="${"0.1"}" y="${"0.1"}" dominant-baseline="${"hanging"}" text-anchor="${"start"}">${escape(number)}</text></g>`;
});

/* src/Puzzle.svelte generated by Svelte v3.29.0 */

const css$2 = {
	code: "section.svelte-td5hz8{flex:1;position:sticky;top:1em;height:fit-content}svg.svelte-td5hz8{display:block;font-size:1px;background:var(--cell-void-color, #1a1a1a);border:4px solid var(--puzzle-border-color, #1a1a1a);font-family:var(--puzzle-font, -apple-system, Helvetica, sans-serif)}",
	map: "{\"version\":3,\"file\":\"Puzzle.svelte\",\"sources\":[\"Puzzle.svelte\"],\"sourcesContent\":[\"<script>\\n  import getSecondarilyFocusedCells from \\\"./helpers/getSecondarilyFocusedCells.js\\\";\\n  import getCellAfterDiff from \\\"./helpers/getCellAfterDiff.js\\\";\\n\\n  import Cell from \\\"./Cell.svelte\\\";\\n\\n  export let clues;\\n  export let cells;\\n  export let focusedDirection;\\n  export let focusedCellIndex;\\n  export let focusedCell;\\n  export let isRevealing;\\n\\texport let isDisableHighlight;\\n  export let revealDuration = 0;\\n\\n  let cellsHistoryIndex = 0;\\n  let cellsHistory = [];\\n  let focusedCellIndexHistoryIndex = 0;\\n  let focusedCellIndexHistory = [];\\n  const numberOfStatesInHistory = 10;\\n\\n  const w = Math.max(...cells.map((d) => d.x)) + 1;\\n  const h = Math.max(...cells.map((d) => d.y)) + 1;\\n\\n  let secondarilyFocusedCells = [];\\n  const updateSecondarilyFocusedCells = () => {\\n    secondarilyFocusedCells = getSecondarilyFocusedCells({\\n      cells,\\n      focusedDirection,\\n      focusedCell,\\n    });\\n  };\\n  $: cells, focusedCellIndex, focusedDirection, updateSecondarilyFocusedCells();\\n\\n  const onCellUpdate = (index, newValue, diff = 1) => {\\n    const doReplaceFilledCells = !!cells[index].value;\\n    const newCells = [\\n      ...cells.slice(0, index),\\n      { ...cells[index], value: newValue },\\n      ...cells.slice(index + 1),\\n    ];\\n    cellsHistory = [newCells, ...cellsHistory.slice(cellsHistoryIndex)].slice(\\n      0,\\n      numberOfStatesInHistory\\n    );\\n    cellsHistoryIndex = 0;\\n    cells = newCells;\\n\\n    onFocusCellDiff(diff, doReplaceFilledCells);\\n  };\\n\\n  const onHistoricalChange = (diff) => {\\n    cellsHistoryIndex += -diff;\\n    cells = cellsHistory[cellsHistoryIndex] || cells;\\n    focusedCellIndexHistoryIndex += -diff;\\n    focusedCellIndex =\\n      focusedCellIndexHistory[cellsHistoryIndex] || focusedCellIndex;\\n  };\\n\\n  const onFocusCell = (index) => {\\n    if (index == focusedCellIndex) {\\n      onFlipDirection();\\n    } else {\\n      focusedCellIndex = index;\\n      focusedCellIndexHistory = [\\n        index,\\n        ...focusedCellIndexHistory.slice(0, numberOfStatesInHistory),\\n      ];\\n      focusedCellIndexHistoryIndex = 0;\\n    }\\n  };\\n\\n  $: sortedCellsInDirection = [...cells].sort((a, b) =>\\n    focusedDirection == \\\"down\\\" ? a.x - b.x || a.y - b.y : a.y - b.y || a.x - b.x\\n  );\\n\\n  const onFocusCellDiff = (diff, doReplaceFilledCells = true) => {\\n    const sortedCellsInDirectionFiltered = sortedCellsInDirection.filter((d) =>\\n      doReplaceFilledCells ? true : !d.value\\n    );\\n    const currentCellIndex = sortedCellsInDirectionFiltered.findIndex(\\n      (d) => d.index == focusedCellIndex\\n    );\\n    const nextCellIndex = (\\n      sortedCellsInDirectionFiltered[currentCellIndex + diff] || {}\\n    ).index;\\n    const nextCell = cells[nextCellIndex];\\n    if (!nextCell) return;\\n    onFocusCell(nextCellIndex);\\n  };\\n\\n  const onFocusClueDiff = (diff = 1) => {\\n    const currentNumber = focusedCell.clueNumbers[focusedDirection];\\n    let nextCluesInDirection = clues.filter(\\n      (clue) =>\\n        (diff > 0\\n          ? clue.number > currentNumber\\n          : clue.number < currentNumber) && clue.direction == focusedDirection\\n    );\\n    if (diff < 0) {\\n      nextCluesInDirection = nextCluesInDirection.reverse();\\n    }\\n    let nextClue = nextCluesInDirection[Math.abs(diff) - 1];\\n    if (!nextClue) {\\n      onFlipDirection();\\n      nextClue = clues.filter((clue) => clue.direction == focusedDirection)[0];\\n    }\\n    focusedCellIndex = cells.findIndex(\\n      (cell) => cell.x == nextClue.x && cell.y == nextClue.y\\n    );\\n  };\\n\\n  const onMoveFocus = (direction, diff) => {\\n    if (focusedDirection != direction) {\\n      const dimension = direction == \\\"across\\\" ? \\\"x\\\" : \\\"y\\\";\\n      focusedDirection = direction;\\n    } else {\\n      const nextCell = getCellAfterDiff({\\n        diff,\\n        cells,\\n        direction,\\n        focusedCell,\\n      });\\n      if (!nextCell) return;\\n      onFocusCell(nextCell.index);\\n    }\\n  };\\n\\n  const onFlipDirection = () => {\\n    focusedDirection = {\\n      across: \\\"down\\\",\\n      down: \\\"across\\\",\\n    }[focusedDirection];\\n  };\\n</script>\\n\\n<section class=\\\"puzzle\\\">\\n  <svg viewBox=\\\"0 0 {w} {h}\\\">\\n    <!-- svg -->\\n    {#each cells as { x, y, value, index, number, custom }}\\n      <Cell\\n        x=\\\"{x}\\\"\\n        y=\\\"{y}\\\"\\n        index=\\\"{index}\\\"\\n        value=\\\"{value}\\\"\\n        number=\\\"{number}\\\"\\n        custom=\\\"{custom}\\\"\\n        changeDelay=\\\"{isRevealing ? (revealDuration / cells.length) * index : 0}\\\"\\n        isRevealing=\\\"{isRevealing}\\\"\\n        isFocused=\\\"{focusedCellIndex == index && !isDisableHighlight}\\\"\\n        isSecondarilyFocused=\\\"{secondarilyFocusedCells.includes(index) && !isDisableHighlight}\\\"\\n        onFocusCell=\\\"{onFocusCell}\\\"\\n        onCellUpdate=\\\"{onCellUpdate}\\\"\\n        onFocusClueDiff=\\\"{onFocusClueDiff}\\\"\\n        onMoveFocus=\\\"{onMoveFocus}\\\"\\n        onFlipDirection=\\\"{onFlipDirection}\\\"\\n        onHistoricalChange=\\\"{onHistoricalChange}\\\" />\\n    {/each}\\n  </svg>\\n</section>\\n\\n<style>\\n  section {\\n    flex: 1;\\n    position: sticky;\\n    top: 1em;\\n    height: fit-content;\\n  }\\n  svg {\\n    display: block;\\n    font-size: 1px;\\n    background: var(--cell-void-color, #1a1a1a);\\n    border: 4px solid var(--puzzle-border-color, #1a1a1a);\\n    font-family: var(--puzzle-font, -apple-system, Helvetica, sans-serif);\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAkKE,OAAO,cAAC,CAAC,AACP,IAAI,CAAE,CAAC,CACP,QAAQ,CAAE,MAAM,CAChB,GAAG,CAAE,GAAG,CACR,MAAM,CAAE,WAAW,AACrB,CAAC,AACD,GAAG,cAAC,CAAC,AACH,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,GAAG,CACd,UAAU,CAAE,IAAI,iBAAiB,CAAC,QAAQ,CAAC,CAC3C,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,qBAAqB,CAAC,QAAQ,CAAC,CACrD,WAAW,CAAE,IAAI,aAAa,CAAC,qCAAqC,CAAC,AACvE,CAAC\"}"
};

const numberOfStatesInHistory = 10;

const Puzzle = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { clues } = $$props;
	let { cells } = $$props;
	let { focusedDirection } = $$props;
	let { focusedCellIndex } = $$props;
	let { focusedCell } = $$props;
	let { isRevealing } = $$props;
	let { isDisableHighlight } = $$props;
	let { revealDuration = 0 } = $$props;
	let cellsHistoryIndex = 0;
	let cellsHistory = [];
	let focusedCellIndexHistory = [];
	const w = Math.max(...cells.map(d => d.x)) + 1;
	const h = Math.max(...cells.map(d => d.y)) + 1;
	let secondarilyFocusedCells = [];

	const updateSecondarilyFocusedCells = () => {
		secondarilyFocusedCells = getSecondarilyFocusedCells({ cells, focusedDirection, focusedCell });
	};

	const onCellUpdate = (index, newValue, diff = 1) => {
		const doReplaceFilledCells = !!cells[index].value;

		const newCells = [
			...cells.slice(0, index),
			{ ...cells[index], value: newValue },
			...cells.slice(index + 1)
		];

		cellsHistory = [newCells, ...cellsHistory.slice(cellsHistoryIndex)].slice(0, numberOfStatesInHistory);
		cellsHistoryIndex = 0;
		cells = newCells;
		onFocusCellDiff(diff, doReplaceFilledCells);
	};

	const onHistoricalChange = diff => {
		cellsHistoryIndex += -diff;
		cells = cellsHistory[cellsHistoryIndex] || cells;
		focusedCellIndex = focusedCellIndexHistory[cellsHistoryIndex] || focusedCellIndex;
	};

	const onFocusCell = index => {
		if (index == focusedCellIndex) {
			onFlipDirection();
		} else {
			focusedCellIndex = index;
			focusedCellIndexHistory = [index, ...focusedCellIndexHistory.slice(0, numberOfStatesInHistory)];
		}
	};

	const onFocusCellDiff = (diff, doReplaceFilledCells = true) => {
		const sortedCellsInDirectionFiltered = sortedCellsInDirection.filter(d => doReplaceFilledCells ? true : !d.value);
		const currentCellIndex = sortedCellsInDirectionFiltered.findIndex(d => d.index == focusedCellIndex);
		const nextCellIndex = (sortedCellsInDirectionFiltered[currentCellIndex + diff] || {}).index;
		const nextCell = cells[nextCellIndex];
		if (!nextCell) return;
		onFocusCell(nextCellIndex);
	};

	const onFocusClueDiff = (diff = 1) => {
		const currentNumber = focusedCell.clueNumbers[focusedDirection];

		let nextCluesInDirection = clues.filter(clue => (diff > 0
		? clue.number > currentNumber
		: clue.number < currentNumber) && clue.direction == focusedDirection);

		if (diff < 0) {
			nextCluesInDirection = nextCluesInDirection.reverse();
		}

		let nextClue = nextCluesInDirection[Math.abs(diff) - 1];

		if (!nextClue) {
			onFlipDirection();
			nextClue = clues.filter(clue => clue.direction == focusedDirection)[0];
		}

		focusedCellIndex = cells.findIndex(cell => cell.x == nextClue.x && cell.y == nextClue.y);
	};

	const onMoveFocus = (direction, diff) => {
		if (focusedDirection != direction) {
			focusedDirection = direction;
		} else {
			const nextCell = getCellAfterDiff({ diff, cells, direction, focusedCell });
			if (!nextCell) return;
			onFocusCell(nextCell.index);
		}
	};

	const onFlipDirection = () => {
		focusedDirection = ({ across: "down", down: "across" })[focusedDirection];
	};

	if ($$props.clues === void 0 && $$bindings.clues && clues !== void 0) $$bindings.clues(clues);
	if ($$props.cells === void 0 && $$bindings.cells && cells !== void 0) $$bindings.cells(cells);
	if ($$props.focusedDirection === void 0 && $$bindings.focusedDirection && focusedDirection !== void 0) $$bindings.focusedDirection(focusedDirection);
	if ($$props.focusedCellIndex === void 0 && $$bindings.focusedCellIndex && focusedCellIndex !== void 0) $$bindings.focusedCellIndex(focusedCellIndex);
	if ($$props.focusedCell === void 0 && $$bindings.focusedCell && focusedCell !== void 0) $$bindings.focusedCell(focusedCell);
	if ($$props.isRevealing === void 0 && $$bindings.isRevealing && isRevealing !== void 0) $$bindings.isRevealing(isRevealing);
	if ($$props.isDisableHighlight === void 0 && $$bindings.isDisableHighlight && isDisableHighlight !== void 0) $$bindings.isDisableHighlight(isDisableHighlight);
	if ($$props.revealDuration === void 0 && $$bindings.revealDuration && revealDuration !== void 0) $$bindings.revealDuration(revealDuration);
	$$result.css.add(css$2);
	let sortedCellsInDirection;

	 {
		(updateSecondarilyFocusedCells());
	}

	sortedCellsInDirection = [...cells].sort((a, b) => focusedDirection == "down"
	? a.x - b.x || a.y - b.y
	: a.y - b.y || a.x - b.x);

	return `<section class="${"puzzle svelte-td5hz8"}"><svg viewBox="${"0 0 " + escape(w) + " " + escape(h)}" class="${"svelte-td5hz8"}">${each(cells, ({ x, y, value, index, number, custom }) => `${validate_component(Cell, "Cell").$$render(
		$$result,
		{
			x,
			y,
			index,
			value,
			number,
			custom,
			changeDelay: isRevealing ? revealDuration / cells.length * index : 0,
			isRevealing,
			isFocused: focusedCellIndex == index && !isDisableHighlight,
			isSecondarilyFocused: secondarilyFocusedCells.includes(index) && !isDisableHighlight,
			onFocusCell,
			onCellUpdate,
			onFocusClueDiff,
			onMoveFocus,
			onFlipDirection,
			onHistoricalChange
		},
		{},
		{}
	)}`)}</svg>
</section>`;
});

/* src/Clue.svelte generated by Svelte v3.29.0 */

const css$3 = {
	code: "button.svelte-1jz5ixd{display:block;width:100%;background:none;text-align:left;appearance:none;outline:none;border:1px solid transparent;border-left:6px solid transparent;padding:0.5em;cursor:pointer;line-height:1.325;color:var(--clue-text-color, #1a1a1a);font-family:var(--clue-font, -apple-system, Helvetica, sans-serif);font-size:1em;cursor:pointer}.clue.svelte-1jz5ixd:focus{border-color:var(--cell-highlight-color, #ffec99)}.is-number-focused.svelte-1jz5ixd{border-left-color:var(--cell-highlight-color, #ffec99)}.is-number-focused.is-direction-focused.svelte-1jz5ixd{background:var(--cell-highlight-color, #ffec99)}.is-filled.svelte-1jz5ixd{opacity:0.33}",
	map: "{\"version\":3,\"file\":\"Clue.svelte\",\"sources\":[\"Clue.svelte\"],\"sourcesContent\":[\"<script>\\n  import scrollTo from \\\"./scroll-to\\\";\\n\\n  export let number;\\n  export let clue;\\n\\texport let isFilled;\\n  export let isNumberFocused = false;\\n  export let isDirectionFocused = false;\\n  export let onFocus = () => {};\\n\\n  let element;\\n\\n  $: isFocused = isNumberFocused;\\n</script>\\n\\n<li bind:this=\\\"{element}\\\" use:scrollTo=\\\"{isFocused}\\\">\\n  <button\\n    class=\\\"clue\\\"\\n    class:is-number-focused=\\\"{isNumberFocused}\\\"\\n    class:is-direction-focused=\\\"{isDirectionFocused}\\\"\\n\\t\\tclass:is-filled=\\\"{isFilled}\\\"\\n    on:click=\\\"{onFocus}\\\">\\n    {number}.\\n    {clue}\\n  </button>\\n</li>\\n\\n<style>\\n  button {\\n    display: block;\\n    width: 100%;\\n    background: none;\\n    text-align: left;\\n    appearance: none;\\n    outline: none;\\n    border: 1px solid transparent;\\n    border-left: 6px solid transparent;\\n    padding: 0.5em;\\n    cursor: pointer;\\n    line-height: 1.325;\\n    color: var(--clue-text-color, #1a1a1a);\\n    font-family: var(--clue-font, -apple-system, Helvetica, sans-serif);\\n    font-size: 1em;\\n\\t\\tcursor: pointer;\\n  }\\n  .clue:focus {\\n    border-color: var(--cell-highlight-color, #ffec99);\\n  }\\n  .is-number-focused {\\n    border-left-color: var(--cell-highlight-color, #ffec99);\\n  }\\n  .is-number-focused.is-direction-focused {\\n    background: var(--cell-highlight-color, #ffec99);\\n  }\\n\\t.is-filled {\\n\\t\\topacity: 0.33;\\n\\t}\\n</style>\\n\"],\"names\":[],\"mappings\":\"AA4BE,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAC7B,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAClC,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,OAAO,CACf,WAAW,CAAE,KAAK,CAClB,KAAK,CAAE,IAAI,iBAAiB,CAAC,QAAQ,CAAC,CACtC,WAAW,CAAE,IAAI,WAAW,CAAC,qCAAqC,CAAC,CACnE,SAAS,CAAE,GAAG,CAChB,MAAM,CAAE,OAAO,AACf,CAAC,AACD,oBAAK,MAAM,AAAC,CAAC,AACX,YAAY,CAAE,IAAI,sBAAsB,CAAC,QAAQ,CAAC,AACpD,CAAC,AACD,kBAAkB,eAAC,CAAC,AAClB,iBAAiB,CAAE,IAAI,sBAAsB,CAAC,QAAQ,CAAC,AACzD,CAAC,AACD,kBAAkB,qBAAqB,eAAC,CAAC,AACvC,UAAU,CAAE,IAAI,sBAAsB,CAAC,QAAQ,CAAC,AAClD,CAAC,AACF,UAAU,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,AACd,CAAC\"}"
};

const Clue = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { number } = $$props;
	let { clue } = $$props;
	let { isFilled } = $$props;
	let { isNumberFocused = false } = $$props;
	let { isDirectionFocused = false } = $$props;

	let { onFocus = () => {
		
	} } = $$props;

	let element;
	if ($$props.number === void 0 && $$bindings.number && number !== void 0) $$bindings.number(number);
	if ($$props.clue === void 0 && $$bindings.clue && clue !== void 0) $$bindings.clue(clue);
	if ($$props.isFilled === void 0 && $$bindings.isFilled && isFilled !== void 0) $$bindings.isFilled(isFilled);
	if ($$props.isNumberFocused === void 0 && $$bindings.isNumberFocused && isNumberFocused !== void 0) $$bindings.isNumberFocused(isNumberFocused);
	if ($$props.isDirectionFocused === void 0 && $$bindings.isDirectionFocused && isDirectionFocused !== void 0) $$bindings.isDirectionFocused(isDirectionFocused);
	if ($$props.onFocus === void 0 && $$bindings.onFocus && onFocus !== void 0) $$bindings.onFocus(onFocus);
	$$result.css.add(css$3);

	return `<li${add_attribute("this", element, 1)}><button class="${[
		"clue svelte-1jz5ixd",
		(isNumberFocused ? "is-number-focused" : "") + " " + (isDirectionFocused ? "is-direction-focused" : "") + " " + (isFilled ? "is-filled" : "")
	].join(" ").trim()}">${escape(number)}.
    ${escape(clue)}</button>
</li>`;
});

/* src/ClueList.svelte generated by Svelte v3.29.0 */

const css$4 = {
	code: ".list.svelte-jdhgl{position:relative;max-height:45vh;margin-bottom:2em;overflow:auto}p.svelte-jdhgl{font-family:var(--clue-font, -apple-system, Helvetica, sans-serif);color:var(--clue-text-color, #1a1a1a);font-weight:700;text-transform:uppercase;padding-left:calc(0.5em + 6px);margin:0}ul.svelte-jdhgl{list-style-type:none;padding-left:0;margin:0;margin-top:1em}.svelte-jdhgl::-moz-scrollbar{width:9px}.svelte-jdhgl::-webkit-scrollbar{width:9px}.svelte-jdhgl::-moz-scrollbar-track{box-shadow:none;border-radius:10px;background:var(--clue-scrollbar-bg, #efefef)}.svelte-jdhgl::-webkit-scrollbar-track{box-shadow:none;border-radius:10px;background:var(--clue-scrollbar-bg, #efefef)}.svelte-jdhgl::scrollbar-thumb{border-radius:10px;background:var(--clue-scrollbar-fg, #cdcdcd);box-shadow:none}.svelte-jdhgl::-moz-scrollbar-thumb{background:var(--clue-scrollbar-fg, #cdcdcd);border-radius:6px}.svelte-jdhgl::-webkit-scrollbar-thumb{background:var(--clue-scrollbar-fg, #cdcdcd);border-radius:6px}",
	map: "{\"version\":3,\"file\":\"ClueList.svelte\",\"sources\":[\"ClueList.svelte\"],\"sourcesContent\":[\"<script>\\n  import Clue from \\\"./Clue.svelte\\\";\\n\\n  export let direction;\\n  export let clues;\\n  export let focusedClueNumbers;\\n  export let isDirectionFocused;\\n  export let onClueFocus;\\n</script>\\n\\n<div class=\\\"list\\\">\\n  <p>{direction}</p>\\n  <ul>\\n    {#each clues as clue}\\n      <Clue\\n        clue=\\\"{clue.clue}\\\"\\n        number=\\\"{clue.number}\\\"\\n\\t\\t\\t\\tisFilled=\\\"{clue.isFilled}\\\"\\n        isNumberFocused=\\\"{focusedClueNumbers[direction] == clue.number}\\\"\\n        isDirectionFocused=\\\"{isDirectionFocused}\\\"\\n        onFocus=\\\"{() => onClueFocus(clue)}\\\" />\\n    {/each}\\n  </ul>\\n</div>\\n\\n<style>\\n  .list {\\n    position: relative;\\n    max-height: 45vh;\\n    margin-bottom: 2em;\\n    overflow: auto;\\n  }\\n\\n  p {\\n    font-family: var(--clue-font, -apple-system, Helvetica, sans-serif);\\n\\t\\tcolor: var(--clue-text-color, #1a1a1a);\\n\\t\\tfont-weight: 700;\\n    text-transform: uppercase;\\n    padding-left: calc(0.5em + 6px);\\n    margin: 0;\\n  }\\n\\n  ul {\\n    list-style-type: none;\\n    padding-left: 0;\\n    margin: 0;\\n    margin-top: 1em;\\n  }\\n\\n  ::-moz-scrollbar {\\n    width: 9px;\\n  }\\n  ::-webkit-scrollbar {\\n    width: 9px;\\n  }\\n\\n  ::-moz-scrollbar-track {\\n    box-shadow: none;\\n    border-radius: 10px;\\n    background: var(--clue-scrollbar-bg, #efefef);\\n  }\\n  ::-webkit-scrollbar-track {\\n    box-shadow: none;\\n    border-radius: 10px;\\n    background: var(--clue-scrollbar-bg, #efefef);\\n  }\\n  ::scrollbar-thumb {\\n    border-radius: 10px;\\n    background: var(--clue-scrollbar-fg, #cdcdcd);\\n    box-shadow: none;\\n  }\\n  ::-moz-scrollbar-thumb {\\n    background: var(--clue-scrollbar-fg, #cdcdcd);\\n    border-radius: 6px;\\n  }\\n  ::-webkit-scrollbar-thumb {\\n    background: var(--clue-scrollbar-fg, #cdcdcd);\\n    border-radius: 6px;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AA0BE,KAAK,aAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,GAAG,CAClB,QAAQ,CAAE,IAAI,AAChB,CAAC,AAED,CAAC,aAAC,CAAC,AACD,WAAW,CAAE,IAAI,WAAW,CAAC,qCAAqC,CAAC,CACrE,KAAK,CAAE,IAAI,iBAAiB,CAAC,QAAQ,CAAC,CACtC,WAAW,CAAE,GAAG,CACd,cAAc,CAAE,SAAS,CACzB,YAAY,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAC/B,MAAM,CAAE,CAAC,AACX,CAAC,AAED,EAAE,aAAC,CAAC,AACF,eAAe,CAAE,IAAI,CACrB,YAAY,CAAE,CAAC,CACf,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,GAAG,AACjB,CAAC,aAED,gBAAgB,AAAC,CAAC,AAChB,KAAK,CAAE,GAAG,AACZ,CAAC,aACD,mBAAmB,AAAC,CAAC,AACnB,KAAK,CAAE,GAAG,AACZ,CAAC,aAED,sBAAsB,AAAC,CAAC,AACtB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,IAAI,mBAAmB,CAAC,QAAQ,CAAC,AAC/C,CAAC,aACD,yBAAyB,AAAC,CAAC,AACzB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,IAAI,mBAAmB,CAAC,QAAQ,CAAC,AAC/C,CAAC,aACD,iBAAiB,AAAC,CAAC,AACjB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,IAAI,mBAAmB,CAAC,QAAQ,CAAC,CAC7C,UAAU,CAAE,IAAI,AAClB,CAAC,aACD,sBAAsB,AAAC,CAAC,AACtB,UAAU,CAAE,IAAI,mBAAmB,CAAC,QAAQ,CAAC,CAC7C,aAAa,CAAE,GAAG,AACpB,CAAC,aACD,yBAAyB,AAAC,CAAC,AACzB,UAAU,CAAE,IAAI,mBAAmB,CAAC,QAAQ,CAAC,CAC7C,aAAa,CAAE,GAAG,AACpB,CAAC\"}"
};

const ClueList = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { direction } = $$props;
	let { clues } = $$props;
	let { focusedClueNumbers } = $$props;
	let { isDirectionFocused } = $$props;
	let { onClueFocus } = $$props;
	if ($$props.direction === void 0 && $$bindings.direction && direction !== void 0) $$bindings.direction(direction);
	if ($$props.clues === void 0 && $$bindings.clues && clues !== void 0) $$bindings.clues(clues);
	if ($$props.focusedClueNumbers === void 0 && $$bindings.focusedClueNumbers && focusedClueNumbers !== void 0) $$bindings.focusedClueNumbers(focusedClueNumbers);
	if ($$props.isDirectionFocused === void 0 && $$bindings.isDirectionFocused && isDirectionFocused !== void 0) $$bindings.isDirectionFocused(isDirectionFocused);
	if ($$props.onClueFocus === void 0 && $$bindings.onClueFocus && onClueFocus !== void 0) $$bindings.onClueFocus(onClueFocus);
	$$result.css.add(css$4);

	return `<div class="${"list svelte-jdhgl"}"><p class="${"svelte-jdhgl"}">${escape(direction)}</p>
  <ul class="${"svelte-jdhgl"}">${each(clues, clue => `${validate_component(Clue, "Clue").$$render(
		$$result,
		{
			clue: clue.clue,
			number: clue.number,
			isFilled: clue.isFilled,
			isNumberFocused: focusedClueNumbers[direction] == clue.number,
			isDirectionFocused,
			onFocus: () => onClueFocus(clue)
		},
		{},
		{}
	)}`)}</ul>
</div>`;
});

/* src/Clues.svelte generated by Svelte v3.29.0 */

const css$5 = {
	code: "section.svelte-3e790s{position:sticky;top:1em;flex:0 1 var(--clue-list-width, 16em);height:fit-content;margin:0 1em}",
	map: "{\"version\":3,\"file\":\"Clues.svelte\",\"sources\":[\"Clues.svelte\"],\"sourcesContent\":[\"<script>\\n  import ClueList from \\\"./ClueList.svelte\\\";\\n\\n  import Clue from \\\"./Clue.svelte\\\";\\n\\n  export let clues;\\n  export let cellIndexMap;\\n  export let focusedDirection;\\n  export let focusedCellIndex;\\n  export let focusedCell;\\n\\n  $: focusedClueNumbers = focusedCell.clueNumbers || {};\\n\\n  const onClueFocus = (clue) => {\\n    focusedDirection = clue.direction;\\n    const cellId = [clue.x, clue.y].join(\\\"-\\\");\\n    focusedCellIndex = cellIndexMap[cellId] || 0;\\n  };\\n</script>\\n\\n<section class=\\\"clues\\\">\\n  {#each ['across', 'down'] as direction}\\n    <ClueList\\n      direction=\\\"{direction}\\\"\\n      focusedClueNumbers=\\\"{focusedClueNumbers}\\\"\\n      clues=\\\"{clues.filter((d) => d.direction == direction)}\\\"\\n      isDirectionFocused=\\\"{focusedDirection == direction}\\\"\\n      onClueFocus=\\\"{onClueFocus}\\\" />\\n  {/each}\\n</section>\\n\\n<style>\\n  section {\\n    position: sticky;\\n    top: 1em;\\n    flex: 0 1 var(--clue-list-width, 16em);\\n    height: fit-content;\\n    margin: 0 1em;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAgCE,OAAO,cAAC,CAAC,AACP,QAAQ,CAAE,MAAM,CAChB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,iBAAiB,CAAC,KAAK,CAAC,CACtC,MAAM,CAAE,WAAW,CACnB,MAAM,CAAE,CAAC,CAAC,GAAG,AACf,CAAC\"}"
};

const Clues = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { clues } = $$props;
	let { cellIndexMap } = $$props;
	let { focusedDirection } = $$props;
	let { focusedCellIndex } = $$props;
	let { focusedCell } = $$props;

	const onClueFocus = clue => {
		focusedDirection = clue.direction;
		const cellId = [clue.x, clue.y].join("-");
		focusedCellIndex = cellIndexMap[cellId] || 0;
	};

	if ($$props.clues === void 0 && $$bindings.clues && clues !== void 0) $$bindings.clues(clues);
	if ($$props.cellIndexMap === void 0 && $$bindings.cellIndexMap && cellIndexMap !== void 0) $$bindings.cellIndexMap(cellIndexMap);
	if ($$props.focusedDirection === void 0 && $$bindings.focusedDirection && focusedDirection !== void 0) $$bindings.focusedDirection(focusedDirection);
	if ($$props.focusedCellIndex === void 0 && $$bindings.focusedCellIndex && focusedCellIndex !== void 0) $$bindings.focusedCellIndex(focusedCellIndex);
	if ($$props.focusedCell === void 0 && $$bindings.focusedCell && focusedCell !== void 0) $$bindings.focusedCell(focusedCell);
	$$result.css.add(css$5);
	let focusedClueNumbers;
	focusedClueNumbers = focusedCell.clueNumbers || {};

	return `<section class="${"clues svelte-3e790s"}">${each(["across", "down"], direction => `${validate_component(ClueList, "ClueList").$$render(
		$$result,
		{
			direction,
			focusedClueNumbers,
			clues: clues.filter(d => d.direction == direction),
			isDirectionFocused: focusedDirection == direction,
			onClueFocus
		},
		{},
		{}
	)}`)}
</section>`;
});

function quadIn(t) {
    return t * t;
}

/* src/Confetti.svelte generated by Svelte v3.29.0 */

const css$6 = {
	code: ".confetti.svelte-15wt7c8{width:2em;position:absolute;stroke-linecap:round;stroke-linejoin:round;fill-rule:evenodd;clip-rule:evenodd;pointer-events:none;overflow:visible;transform:translate(-50%, -50%)}@keyframes svelte-15wt7c8-pop{0%{transform:rotate(var(--rotation)) scale(1) translate(0em, 0em)}100%{transform:rotate(calc(var(--rotation) + 60deg)) scale(0)\n        translate(9em, 9em);fill:white}}g.svelte-15wt7c8{transition:all 0.5s ease-out;transform:rotate(var(--rotation)) scale(0) translate(0, 0);animation:svelte-15wt7c8-pop 2s ease-out;animation-iteration-count:infinite}",
	map: "{\"version\":3,\"file\":\"Confetti.svelte\",\"sources\":[\"Confetti.svelte\"],\"sourcesContent\":[\"<script>\\n  import { quadIn } from \\\"svelte/easing\\\";\\n\\n  export let numberOfElements = 50;\\n  export let durationInSeconds = 2;\\n  export let colors = [\\n    \\\"#fff\\\",\\n    \\\"#c7ecee\\\",\\n    \\\"#778beb\\\",\\n    \\\"#f7d794\\\",\\n    \\\"#63cdda\\\",\\n    \\\"#cf6a87\\\",\\n    \\\"#e77f67\\\",\\n    \\\"#786fa6\\\",\\n    \\\"#FDA7DF\\\",\\n    \\\"#4b7bec\\\",\\n    \\\"#475c83\\\",\\n  ];\\n\\n  const pickFrom = (arr) => arr[Math.round(Math.random() * arr.length)];\\n  const randomNumber = (min, max) => Math.random() * (max - min) + min;\\n  const getManyOf = (str) => new Array(30).fill(0).map(() => str);\\n\\n  const elementOptions = [\\n    ...getManyOf(`<circle r=\\\"3\\\" />`),\\n    ...getManyOf(\\n      `<path d=\\\"M3.83733 4.73234C4.38961 4.73234 4.83733 4.28463 4.83733 3.73234C4.83733 3.18006 4.38961 2.73234 3.83733 2.73234C3.28505 2.73234 2.83733 3.18006 2.83733 3.73234C2.83733 4.28463 3.28505 4.73234 3.83733 4.73234ZM3.83733 6.73234C5.49418 6.73234 6.83733 5.38919 6.83733 3.73234C6.83733 2.07549 5.49418 0.732341 3.83733 0.732341C2.18048 0.732341 0.83733 2.07549 0.83733 3.73234C0.83733 5.38919 2.18048 6.73234 3.83733 6.73234Z\\\" />`\\n    ),\\n    ...getManyOf(\\n      `<path d=\\\"M4.29742 2.26041C3.86864 2.1688 3.20695 2.21855 2.13614 3.0038C1.69078 3.33041 1.06498 3.23413 0.738375 2.78876C0.411774 2.3434 0.508051 1.7176 0.953417 1.39099C2.32237 0.387097 3.55827 0.0573281 4.71534 0.304565C5.80081 0.536504 6.61625 1.24716 7.20541 1.78276C7.28295 1.85326 7.35618 1.92051 7.4263 1.9849C7.64841 2.18888 7.83929 2.36418 8.03729 2.52315C8.29108 2.72692 8.48631 2.8439 8.64952 2.90181C8.7915 2.95219 8.91895 2.96216 9.07414 2.92095C9.24752 2.8749 9.5134 2.7484 9.88467 2.42214C10.2995 2.05757 10.9314 2.09833 11.2959 2.51319C11.6605 2.92805 11.6198 3.5599 11.2049 3.92447C10.6816 4.38435 10.1478 4.70514 9.58752 4.85394C9.00909 5.00756 8.469 4.95993 7.9807 4.78667C7.51364 4.62093 7.11587 4.34823 6.78514 4.08268C6.53001 3.87783 6.27248 3.64113 6.04114 3.4285C5.97868 3.37109 5.91814 3.31544 5.86006 3.26264C5.25645 2.7139 4.79779 2.36733 4.29742 2.26041Z\\\" />`\\n    ),\\n    ...getManyOf(`<rect width=\\\"4\\\" height=\\\"4\\\" x=\\\"-2\\\" y=\\\"-2\\\" />`),\\n    `<path d=\\\"M -5 5 L 0 -5 L 5 5 Z\\\" />`,\\n    ...\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\"\\n      .split(\\\"\\\")\\n      .map((letter) => `<text style=\\\"font-weight: 700\\\">${letter}</text>`),\\n  ];\\n\\n  const allElements = new Array(numberOfElements)\\n    .fill(0)\\n    .map((_, i) => [pickFrom(elementOptions), pickFrom(colors), Math.random()]);\\n</script>\\n\\n<svg class=\\\"confetti\\\" viewBox=\\\"-10 -10 10 10\\\">\\n  {#each allElements as [element, color, scale], i}\\n    <g style=\\\"transform: scale({scale})\\\">\\n      <g\\n        fill=\\\"{color}\\\"\\n        style=\\\"{[`--rotation: ${Math.random() * 360}deg`, `animation-delay: ${quadIn(i / numberOfElements)}s`, `animation-duration: ${durationInSeconds * randomNumber(0.7, 1)}s`].join(';')}\\\">\\n        {@html element}\\n      </g>\\n    </g>\\n  {/each}\\n</svg>\\n\\n<style>\\n  .confetti {\\n    width: 2em;\\n    position: absolute;\\n    stroke-linecap: round;\\n    stroke-linejoin: round;\\n    fill-rule: evenodd;\\n    clip-rule: evenodd;\\n    pointer-events: none;\\n    overflow: visible;\\n    transform: translate(-50%, -50%);\\n  }\\n  @keyframes pop {\\n    0% {\\n      transform: rotate(var(--rotation)) scale(1) translate(0em, 0em);\\n    }\\n    100% {\\n      transform: rotate(calc(var(--rotation) + 60deg)) scale(0)\\n        translate(9em, 9em);\\n      fill: white;\\n    }\\n  }\\n  g {\\n    transition: all 0.5s ease-out;\\n    transform: rotate(var(--rotation)) scale(0) translate(0, 0);\\n    animation: pop 2s ease-out;\\n    animation-iteration-count: infinite;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAwDE,SAAS,eAAC,CAAC,AACT,KAAK,CAAE,GAAG,CACV,QAAQ,CAAE,QAAQ,CAClB,cAAc,CAAE,KAAK,CACrB,eAAe,CAAE,KAAK,CACtB,SAAS,CAAE,OAAO,CAClB,SAAS,CAAE,OAAO,CAClB,cAAc,CAAE,IAAI,CACpB,QAAQ,CAAE,OAAO,CACjB,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,AAClC,CAAC,AACD,WAAW,kBAAI,CAAC,AACd,EAAE,AAAC,CAAC,AACF,SAAS,CAAE,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,AACjE,CAAC,AACD,IAAI,AAAC,CAAC,AACJ,SAAS,CAAE,OAAO,KAAK,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACvD,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CACrB,IAAI,CAAE,KAAK,AACb,CAAC,AACH,CAAC,AACD,CAAC,eAAC,CAAC,AACD,UAAU,CAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,CAC7B,SAAS,CAAE,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAC3D,SAAS,CAAE,kBAAG,CAAC,EAAE,CAAC,QAAQ,CAC1B,yBAAyB,CAAE,QAAQ,AACrC,CAAC\"}"
};

const Confetti = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { numberOfElements = 50 } = $$props;
	let { durationInSeconds = 2 } = $$props;

	let { colors = [
		"#fff",
		"#c7ecee",
		"#778beb",
		"#f7d794",
		"#63cdda",
		"#cf6a87",
		"#e77f67",
		"#786fa6",
		"#FDA7DF",
		"#4b7bec",
		"#475c83"
	] } = $$props;

	const pickFrom = arr => arr[Math.round(Math.random() * arr.length)];
	const randomNumber = (min, max) => Math.random() * (max - min) + min;
	const getManyOf = str => new Array(30).fill(0).map(() => str);

	const elementOptions = [
		...getManyOf(`<circle r="3" />`),
		...getManyOf(`<path d="M3.83733 4.73234C4.38961 4.73234 4.83733 4.28463 4.83733 3.73234C4.83733 3.18006 4.38961 2.73234 3.83733 2.73234C3.28505 2.73234 2.83733 3.18006 2.83733 3.73234C2.83733 4.28463 3.28505 4.73234 3.83733 4.73234ZM3.83733 6.73234C5.49418 6.73234 6.83733 5.38919 6.83733 3.73234C6.83733 2.07549 5.49418 0.732341 3.83733 0.732341C2.18048 0.732341 0.83733 2.07549 0.83733 3.73234C0.83733 5.38919 2.18048 6.73234 3.83733 6.73234Z" />`),
		...getManyOf(`<path d="M4.29742 2.26041C3.86864 2.1688 3.20695 2.21855 2.13614 3.0038C1.69078 3.33041 1.06498 3.23413 0.738375 2.78876C0.411774 2.3434 0.508051 1.7176 0.953417 1.39099C2.32237 0.387097 3.55827 0.0573281 4.71534 0.304565C5.80081 0.536504 6.61625 1.24716 7.20541 1.78276C7.28295 1.85326 7.35618 1.92051 7.4263 1.9849C7.64841 2.18888 7.83929 2.36418 8.03729 2.52315C8.29108 2.72692 8.48631 2.8439 8.64952 2.90181C8.7915 2.95219 8.91895 2.96216 9.07414 2.92095C9.24752 2.8749 9.5134 2.7484 9.88467 2.42214C10.2995 2.05757 10.9314 2.09833 11.2959 2.51319C11.6605 2.92805 11.6198 3.5599 11.2049 3.92447C10.6816 4.38435 10.1478 4.70514 9.58752 4.85394C9.00909 5.00756 8.469 4.95993 7.9807 4.78667C7.51364 4.62093 7.11587 4.34823 6.78514 4.08268C6.53001 3.87783 6.27248 3.64113 6.04114 3.4285C5.97868 3.37109 5.91814 3.31544 5.86006 3.26264C5.25645 2.7139 4.79779 2.36733 4.29742 2.26041Z" />`),
		...getManyOf(`<rect width="4" height="4" x="-2" y="-2" />`),
		`<path d="M -5 5 L 0 -5 L 5 5 Z" />`,
		...("ABCDEFGHIJKLMNOPQRSTUVWXYZ").split("").map(letter => `<text style="font-weight: 700">${letter}</text>`)
	];

	const allElements = new Array(numberOfElements).fill(0).map((_, i) => [pickFrom(elementOptions), pickFrom(colors), Math.random()]);
	if ($$props.numberOfElements === void 0 && $$bindings.numberOfElements && numberOfElements !== void 0) $$bindings.numberOfElements(numberOfElements);
	if ($$props.durationInSeconds === void 0 && $$bindings.durationInSeconds && durationInSeconds !== void 0) $$bindings.durationInSeconds(durationInSeconds);
	if ($$props.colors === void 0 && $$bindings.colors && colors !== void 0) $$bindings.colors(colors);
	$$result.css.add(css$6);

	return `<svg class="${"confetti svelte-15wt7c8"}" viewBox="${"-10 -10 10 10"}">${each(allElements, ([element, color, scale], i) => `<g style="${"transform: scale(" + escape(scale) + ")"}" class="${"svelte-15wt7c8"}"><g${add_attribute("fill", color, 0)}${add_attribute(
		"style",
		[
			`--rotation: ${Math.random() * 360}deg`,
			`animation-delay: ${quadIn(i / numberOfElements)}s`,
			`animation-duration: ${durationInSeconds * randomNumber(0.7, 1)}s`
		].join(";"),
		0
	)} class="${"svelte-15wt7c8"}">${element}</g></g>`)}</svg>`;
});

/* src/CompletedMessage.svelte generated by Svelte v3.29.0 */

const css$7 = {
	code: ".c.svelte-1qq6vh8{position:absolute;top:min(50%, 15em);left:50%;background:white;transform:translate(-50%, -50%);border-radius:2em;z-index:10;box-shadow:0 13px 27px -5px rgba(50, 50, 93, 0.25),\n      0 8px 16px -8px rgba(0, 0, 0, 0.3)}.background.svelte-1qq6vh8{position:absolute;top:0;right:0;bottom:0;left:0;background:#fff;opacity:0.9;cursor:pointer;z-index:2}h3.svelte-1qq6vh8{margin:0;margin-bottom:0.5em}button.svelte-1qq6vh8{display:block;appearance:none;background:white;font-weight:700;border-radius:2em;line-height:1.3em;margin-top:0.9em;padding:0.9em 1.3em;font-size:0.9em;text-transform:uppercase;letter-spacing:0.05em;border:2px solid black;outline:none;cursor:pointer}button.svelte-1qq6vh8:hover,button.svelte-1qq6vh8:focus{background:black;color:white}.content.svelte-1qq6vh8{position:relative;display:flex;flex-direction:column;align-items:center;padding:2em;z-index:10}.confetti.svelte-1qq6vh8{position:absolute;top:30%;left:50%;transform:translate(-50%, -50%)}",
	map: "{\"version\":3,\"file\":\"CompletedMessage.svelte\",\"sources\":[\"CompletedMessage.svelte\"],\"sourcesContent\":[\"<script>\\n  import { fade } from 'svelte/transition';\\n  import Confetti from './Confetti.svelte';\\n\\n  let isOpen = true;\\n</script>\\n\\n{#if isOpen}\\n  <div class=\\\"c\\\" transition:fade=\\\"{{ y: 20 }}\\\">\\n    <div class=\\\"content\\\">\\n      <h3>You did it!</h3>\\n      <slot />\\n      <button on:click=\\\"{() => (isOpen = false)}\\\"> View puzzle </button>\\n    </div>\\n    <div class=\\\"confetti\\\">\\n      <Confetti />\\n    </div>\\n  </div>\\n  <div\\n    class=\\\"background\\\"\\n    transition:fade=\\\"{{ duration: 300 }}\\\"\\n    on:click=\\\"{() => (isOpen = false)}\\\"></div>\\n{/if}\\n\\n<style>\\n  .c {\\n    position: absolute;\\n    top: min(50%, 15em);\\n    left: 50%;\\n    background: white;\\n    transform: translate(-50%, -50%);\\n    border-radius: 2em;\\n    z-index: 10;\\n    box-shadow: 0 13px 27px -5px rgba(50, 50, 93, 0.25),\\n      0 8px 16px -8px rgba(0, 0, 0, 0.3);\\n  }\\n  .background {\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0;\\n    background: #fff;\\n    opacity: 0.9;\\n    cursor: pointer;\\n    z-index: 2;\\n  }\\n  h3 {\\n    margin: 0;\\n    margin-bottom: 0.5em;\\n  }\\n\\n  button {\\n    display: block;\\n    appearance: none;\\n    background: white;\\n    font-weight: 700;\\n    border-radius: 2em;\\n    line-height: 1.3em;\\n    /* color: white; */\\n    margin-top: 0.9em;\\n    padding: 0.9em 1.3em;\\n    font-size: 0.9em;\\n    text-transform: uppercase;\\n    letter-spacing: 0.05em;\\n    border: 2px solid black;\\n    outline: none;\\n    cursor: pointer;\\n  }\\n  button:hover,\\n  button:focus {\\n    background: black;\\n    color: white;\\n  }\\n  .content {\\n    position: relative;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    padding: 2em;\\n    z-index: 10;\\n  }\\n  .confetti {\\n    position: absolute;\\n    top: 30%;\\n    left: 50%;\\n    transform: translate(-50%, -50%);\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAyBE,EAAE,eAAC,CAAC,AACF,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CACnB,IAAI,CAAE,GAAG,CACT,UAAU,CAAE,KAAK,CACjB,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,EAAE,CACX,UAAU,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;MAClD,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AACtC,CAAC,AACD,WAAW,eAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,IAAI,CAAE,CAAC,CACP,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,EAAE,eAAC,CAAC,AACF,MAAM,CAAE,CAAC,CACT,aAAa,CAAE,KAAK,AACtB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,GAAG,CAChB,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,KAAK,CAElB,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,KAAK,CAAC,KAAK,CACpB,SAAS,CAAE,KAAK,CAChB,cAAc,CAAE,SAAS,CACzB,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,qBAAM,MAAM,CACZ,qBAAM,MAAM,AAAC,CAAC,AACZ,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,KAAK,AACd,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,EAAE,AACb,CAAC,AACD,SAAS,eAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,AAClC,CAAC\"}"
};

const CompletedMessage = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	$$result.css.add(css$7);

	return `${ `<div class="${"c svelte-1qq6vh8"}"><div class="${"content svelte-1qq6vh8"}"><h3 class="${"svelte-1qq6vh8"}">You did it!</h3>
      ${slots.default ? slots.default({}) : ``}
      <button class="${"svelte-1qq6vh8"}">View puzzle </button></div>
    <div class="${"confetti svelte-1qq6vh8"}">${validate_component(Confetti, "Confetti").$$render($$result, {}, {}, {})}</div></div>
  <div class="${"background svelte-1qq6vh8"}"></div>`
	}`;
});

function createClues(data) {
  const withId = data.map((d, i) => ({
		...d,
		index: i,
    id: `${d.x}-${d.y}`,
  }));
	
  // sort asc by start position of clue so we have proper clue ordering
  withId.sort((a, b) => a.y - b.y || a.x - b.x);

  // create a lookup to store clue number (and reuse if same start pos)
  let lookup = {};
  let currentNumber = 1;

  const withNumber = withId.map((d) => {
    let number;
    if (lookup[d.id]) number = lookup[d.id];
    else {
      lookup[d.id] = number = currentNumber;
      currentNumber += 1;
    }
    return {
      ...d,
      number,
    };
  });


	// create cells for each letter
	const withCells = withNumber.map(d => {
		const chars = d.answer.split("");
    const cells = chars.map((answer, i) => {
      const x = d.x + (d.direction === "across" ? i : 0);
      const y = d.y + (d.direction === "down" ? i : 0);
      const number = i === 0 ? d.number : "";
      const clueNumbers = { [d.direction]: d.number };
      const id = `${x}-${y}`;
      const value = "";
      const custom = d.custom || "";
      return {
        id,
        number,
        clueNumbers,
        x,
        y,
        value,
        answer: answer.toUpperCase(),
        custom,
      };
    });
		return {
			...d,
			cells
		}
	});

	withCells.sort((a, b) => a.number - b.number);

	return withCells;
}

function createCells(data) {
  const cells = [].concat(...data.map(d => d.cells));
  let dict = {};

  // sort so that ones with number values come first and dedupe
  cells.sort((a, b) => a.y - b.y || a.x - b.x || b.number - a.number);
  cells.forEach((d) => {
    if (!dict[d.id]) {
      dict[d.id] = d;
    } else {
      // consolidate clue numbers for across & down
      dict[d.id].clueNumbers = {
        ...d.clueNumbers,
        ...dict[d.id].clueNumbers,
      };
      // consolidate custom classes
      if (dict[d.id].custom !== d.custom)
        dict[d.id].custom = `${dict[d.id].custom} ${d.custom}`;
    }
  });

  const unique = Object.keys(dict).map((d) => dict[d]);
  unique.sort((a, b) => a.y - b.y || a.x - b.x);
  // add index
  const output = unique.map((d, i) => ({ ...d, index: i }));
  return output;
}

function validateClues(data) {
	const props = [
    {
      prop: "clue",
      type: "string",
    },
    {
      prop: "answer",
      type: "string",
    },
    {
      prop: "x",
      type: "number",
    },
    {
      prop: "y",
      type: "number",
    }
  ];

	// only store if they fail
	let failedProp = false;
  data.forEach(d => !!props.map(p => {
		const f = typeof d[p.prop] !== p.type;
		if (f) {
			failedProp = true;
			console.error(`"${p.prop}" is not a ${p.type}\n`, d);
		}
	}));

	let failedCell = false;
	const cells = [].concat(...data.map(d => d.cells));
	
	let dict = {};
	cells.forEach((d) => {
    if (!dict[d.id]) {
      dict[d.id] = d.answer;
    } else {
			if (dict[d.id] !== d.answer) {
				failedCell = true;
				console.error(`cell "${d.id}" has two different values\n`, `${dict[d.id]} and ${d.answer}`);
			}
		}
  });

	return !failedProp && !failedCell;
}

function fromPairs(arr) {
  let res = {};
  arr.forEach((d) => {
    res[d[0]] = d[1];
  });
  return res;
}

/* src/Crossword.svelte generated by Svelte v3.29.0 */

const css$8 = {
	code: ".theme-classic.svelte-193oi9r{--theme-puzzle-border-color:#1a1a1a;--theme-puzzle-font:-apple-system, Helvetica, sans-serif;--theme-clue-font:-apple-system, Helvetica, sans-serif;--theme-clue-text-color:#1a1a1a;--theme-clue-scrollbar-bg:#efefef;--theme-clue-scrollbar-fg:#cdcdcd;--theme-clue-puzzle-order:row;--theme-clue-list-width:16em;--theme-cell-highlight-color:#ffec99;--theme-cell-secondary-color:#ffcc00;--theme-cell-bg-color:#fff;--theme-cell-border-color:#1a1a1a;--theme-cell-border-width:0.01;--theme-cell-text-color:#1a1a1a;--theme-cell-font-size:0.7em;--theme-cell-font-weight:700;--theme-cell-void-color:#1a1a1a;--theme-number-font-size:0.3em;--theme-number-font-weight:400;--theme-number-color:#8a8a8a}.theme-dark.svelte-193oi9r{--theme-puzzle-border-color:#8a8a8a;--theme-puzzle-font:-apple-system, Helvetica, sans-serif;--theme-clue-font:-apple-system, Helvetica, sans-serif;--theme-clue-text-color:#fff;--theme-clue-background-color:#1a1a1a;--theme-clue-scrollbar-bg:#5a5a5a;--theme-clue-scrollbar-fg:#efefef;--theme-clue-puzzle-order:row;--theme-clue-list-width:16em;--theme-cell-highlight-color:#066;--theme-cell-secondary-color:#003d3d;--theme-cell-bg-color:#1a1a1a;--theme-cell-border-color:#8a8a8a;--theme-cell-border-width:0.01;--theme-cell-text-color:#fff;--theme-cell-font-size:0.7em;--theme-cell-font-weight:700;--theme-cell-void-color:#1a1a1a;--theme-number-font-size:0.3em;--theme-number-font-weight:400;--theme-number-color:#cdcdcd}.theme-amelia.svelte-193oi9r{--theme-puzzle-border-color:#353b48;--theme-puzzle-font:-apple-system, Helvetica, sans-serif;--theme-clue-font:-apple-system, Helvetica, sans-serif;--theme-clue-text-color:#353b48;--theme-clue-scrollbar-bg:#d7cefd;--theme-clue-scrollbar-fg:#9980fa;--theme-clue-puzzle-order:row;--theme-clue-list-width:16em;--theme-cell-highlight-color:#d7cefd;--theme-cell-secondary-color:#9980fa;--theme-cell-bg-color:#fff;--theme-cell-border-color:#353b48;--theme-cell-border-width:0.027;--theme-cell-text-color:#353b48;--theme-cell-font-size:0.76em;--theme-cell-font-weight:700;--theme-cell-void-color:#353b48;--theme-number-font-size:0.25em;--theme-number-font-weight:100;--theme-number-color:#353b48}.theme-citrus.svelte-193oi9r{--theme-puzzle-border-color:#193939;--theme-puzzle-font:-apple-system, Helvetica, sans-serif;--theme-clue-font:-apple-system, Helvetica, sans-serif;--theme-clue-text-color:#193939;--theme-clue-background-color:#fff;--theme-clue-scrollbar-bg:#ebf3f3;--theme-clue-scrollbar-fg:#c9d8d8;--theme-clue-puzzle-order:row;--theme-clue-list-width:16em;--theme-cell-highlight-color:#ffdfd5;--theme-cell-secondary-color:#ff957d;--theme-cell-bg-color:#fff;--theme-cell-border-color:#193939;--theme-cell-border-width:0.01;--theme-cell-text-color:#193939;--theme-cell-font-size:0.7em;--theme-cell-font-weight:700;--theme-cell-void-color:#266b6b;--theme-number-font-size:0.3em;--theme-number-font-weight:400;--theme-number-color:#266b6b}article.svelte-193oi9r{--puzzle-border-color:var(\n      --theme-puzzle-border-color,\n      var(--theme-puzzle-border-color)\n    );--puzzle-font:var(--theme-puzzle-font, var(--theme-puzzle-font));--clue-font:var(--theme-clue-font, var(--theme-clue-font));--clue-text-color:var(\n      --theme-clue-text-color,\n      var(--theme-clue-text-color)\n    );--clue-background-color:var(\n      --theme-clue-background-color,\n      var(--theme-clue-background-color)\n    );--clue-scrollbar-bg:var(\n      --theme-clue-scrollbar-bg,\n      var(--theme-clue-scrollbar-bg)\n    );--clue-scrollbar-fg:var(\n      --theme-clue-scrollbar-fg,\n      var(--theme-clue-scrollbar-fg)\n    );--clue-puzzle-order:var(\n      --theme-clue-puzzle-order,\n      var(--theme-clue-puzzle-order)\n    );--clue-list-width:var(\n      --theme-clue-list-width,\n      var(--theme-clue-list-width)\n    );--cell-highlight-color:var(\n      --theme-cell-highlight-color,\n      var(--theme-cell-highlight-color)\n    );--cell-secondary-color:var(\n      --theme-cell-secondary-color,\n      var(--theme-cell-secondary-color)\n    );--cell-bg-color:var(--theme-cell-bg-color, var(--theme-cell-bg-color));--cell-border-color:var(\n      --theme-cell-border-color,\n      var(--theme-cell-border-color)\n    );--cell-border-width:var(\n      --theme-cell-border-width,\n      var(--theme-cell-border-width)\n    );--cell-text-color:var(\n      --theme-cell-text-color,\n      var(--theme-cell-text-color)\n    );--cell-font-size:var(--theme-cell-font-size, var(--theme-cell-font-size));--cell-font-weight:var(\n      --theme-cell-font-weight,\n      var(--theme-cell-font-weight)\n    );--cell-void-color:var(\n      --theme-cell-void-color,\n      var(--theme-cell-void-color)\n    );--number-font-size:var(\n      --theme-number-font-size,\n      var(--theme-number-font-size)\n    );--number-font-weight:var(\n      --theme-number-font-weight,\n      var(--theme-number-font-weight)\n    );--number-color:var(--theme-number-color, var(--theme-number-color));position:relative;display:flex;flex-direction:var(--clue-puzzle-order, row)}",
	map: "{\"version\":3,\"file\":\"Crossword.svelte\",\"sources\":[\"Crossword.svelte\"],\"sourcesContent\":[\"<script>\\n  import Toolbar from \\\"./Toolbar.svelte\\\";\\n  import Puzzle from \\\"./Puzzle.svelte\\\";\\n  import Clues from \\\"./Clues.svelte\\\";\\n  import CompletedMessage from \\\"./CompletedMessage.svelte\\\";\\n  import createClues from \\\"./helpers/createClues.js\\\";\\n  import createCells from \\\"./helpers/createCells.js\\\";\\n  import validateClues from \\\"./helpers/validateClues.js\\\";\\n  import { fromPairs } from \\\"./helpers/utils.js\\\";\\n\\n  export let data = [];\\n  export let revealed = false;\\n  export let actions = [\\\"reset\\\", \\\"reveal\\\"];\\n  export let revealDuration = 1000;\\n  export let theme = \\\"classic\\\";\\n  export let disableHighlight = false;\\n\\texport let showCompleteMessage = true;\\n\\n  let originalClues = createClues(data);\\n  let validated = validateClues(originalClues);\\n  let clues = originalClues.map((d) => ({ ...d }));\\n  let cells = createCells(originalClues);\\n  let focusedDirection = \\\"across\\\";\\n  let focusedCellIndex = 0;\\n  let isRevealing = false;\\n  let revealTimeout;\\n  let clueCompletion;\\n\\n  $: focusedCell = cells[focusedCellIndex] || {};\\n  $: cellIndexMap = fromPairs(cells.map((cell) => [cell.id, cell.index]));\\n  $: percentCorrect =\\n    cells.filter((d) => d.answer === d.value).length / cells.length;\\n  $: isComplete = percentCorrect == 1;\\n  $: themeClass = theme ? `theme-${theme}` : \\\"\\\";\\n  $: isDisableHighlight = isComplete && disableHighlight;\\n  $: cells, (clues = checkClues());\\n\\n  function checkClues() {\\n    return clues.map((d) => {\\n      const index = d.index;\\n      const cellChecks = d.cells.map((c) => {\\n        const { value } = cells.find((e) => e.id === c.id);\\n        const hasValue = !!value;\\n        const hasCorrect = value === c.answer;\\n        return { hasValue, hasCorrect };\\n      });\\n      const isCorrect =\\n        cellChecks.filter((c) => c.hasCorrect).length === d.answer.length;\\n      const isFilled =\\n        cellChecks.filter((c) => c.hasValue).length === d.answer.length;\\n      return {\\n        ...d,\\n        isCorrect,\\n        isFilled,\\n      };\\n    });\\n  }\\n\\n  function clear() {\\n    isRevealing = false;\\n    focusedCellIndex = 0;\\n    focusedDirection = \\\"across\\\";\\n  }\\n\\n  function onReset() {\\n    clear();\\n    if (revealTimeout) clearTimeout(revealTimeout);\\n    cells = cells.map((cell) => ({\\n      ...cell,\\n      value: \\\"\\\",\\n    }));\\n    revealed = false;\\n  }\\n\\n  function onReveal() {\\n    if (revealed) return true;\\n    clear();\\n    cells = cells.map((cell) => ({\\n      ...cell,\\n      value: cell.answer,\\n    }));\\n    revealed = true;\\n    startReveal();\\n  }\\n\\n  function startReveal() {\\n    isRevealing = true;\\n    if (revealTimeout) clearTimeout(revealTimeout);\\n    revealTimeout = setTimeout(() => {\\n      isRevealing = false;\\n    }, revealDuration + 250);\\n  }\\n\\n  function onToolbarEvent({ detail }) {\\n    if (detail === \\\"reset\\\") onReset();\\n    else if (detail === \\\"reveal\\\") onReveal();\\n  }\\n</script>\\n\\n<slot name=\\\"toolbar\\\" onReset=\\\"{onReset}\\\" onReveal=\\\"{onReveal}\\\">\\n  <Toolbar actions=\\\"{actions}\\\" on:event=\\\"{onToolbarEvent}\\\" />\\n</slot>\\n\\n<article class=\\\"crossword {themeClass}\\\">\\n  {#if validated}\\n    <Clues\\n      clues=\\\"{clues}\\\"\\n      cellIndexMap=\\\"{cellIndexMap}\\\"\\n      bind:focusedCellIndex\\n      bind:focusedCell\\n      bind:focusedDirection />\\n    <Puzzle\\n      clues=\\\"{clues}\\\"\\n      focusedCell=\\\"{focusedCell}\\\"\\n      isRevealing=\\\"{isRevealing}\\\"\\n      isDisableHighlight=\\\"{isDisableHighlight}\\\"\\n      revealDuration=\\\"{revealDuration}\\\"\\n      bind:cells\\n      bind:focusedCellIndex\\n      bind:focusedDirection />\\n  {/if}\\n\\n  {#if isComplete && !isRevealing && showCompleteMessage}\\n    <CompletedMessage>\\n      <slot name=\\\"complete\\\" />\\n    </CompletedMessage>\\n  {/if}\\n</article>\\n\\n<style>\\n  .theme-classic {\\n    --theme-puzzle-border-color: #1a1a1a;\\n    --theme-puzzle-font: -apple-system, Helvetica, sans-serif;\\n\\n    --theme-clue-font: -apple-system, Helvetica, sans-serif;\\n    --theme-clue-text-color: #1a1a1a;\\n    --theme-clue-scrollbar-bg: #efefef;\\n    --theme-clue-scrollbar-fg: #cdcdcd;\\n    --theme-clue-puzzle-order: row;\\n    --theme-clue-list-width: 16em;\\n\\n    --theme-cell-highlight-color: #ffec99;\\n    --theme-cell-secondary-color: #ffcc00;\\n    --theme-cell-bg-color: #fff;\\n    --theme-cell-border-color: #1a1a1a;\\n    --theme-cell-border-width: 0.01;\\n    --theme-cell-text-color: #1a1a1a;\\n    --theme-cell-font-size: 0.7em;\\n    --theme-cell-font-weight: 700;\\n    --theme-cell-void-color: #1a1a1a;\\n\\n    --theme-number-font-size: 0.3em;\\n    --theme-number-font-weight: 400;\\n    --theme-number-color: #8a8a8a;\\n  }\\n\\n  .theme-dark {\\n    --theme-puzzle-border-color: #8a8a8a;\\n    --theme-puzzle-font: -apple-system, Helvetica, sans-serif;\\n    \\n\\t\\t--theme-clue-font: -apple-system, Helvetica, sans-serif;\\n    --theme-clue-text-color: #fff;\\n    --theme-clue-background-color: #1a1a1a;\\n    --theme-clue-scrollbar-bg: #5a5a5a;\\n    --theme-clue-scrollbar-fg: #efefef;\\n    --theme-clue-puzzle-order: row;\\n    --theme-clue-list-width: 16em;\\n    \\n\\t\\t--theme-cell-highlight-color: #066;\\n    --theme-cell-secondary-color: #003d3d;\\n    --theme-cell-bg-color: #1a1a1a;\\n    --theme-cell-border-color: #8a8a8a;\\n    --theme-cell-border-width: 0.01;\\n    --theme-cell-text-color: #fff;\\n    --theme-cell-font-size: 0.7em;\\n    --theme-cell-font-weight: 700;\\n    --theme-cell-void-color: #1a1a1a;\\n    \\n\\t\\t--theme-number-font-size: 0.3em;\\n    --theme-number-font-weight: 400;\\n    --theme-number-color: #cdcdcd;\\n  }\\n\\n  .theme-amelia {\\n    --theme-puzzle-border-color: #353b48;\\n    --theme-puzzle-font: -apple-system, Helvetica, sans-serif;\\n\\n    --theme-clue-font: -apple-system, Helvetica, sans-serif;\\n    --theme-clue-text-color: #353b48;\\n    --theme-clue-scrollbar-bg: #d7cefd;\\n    --theme-clue-scrollbar-fg: #9980fa;\\n    --theme-clue-puzzle-order: row;\\n    --theme-clue-list-width: 16em;\\n\\n    --theme-cell-highlight-color: #d7cefd;\\n    --theme-cell-secondary-color: #9980fa;\\n    --theme-cell-bg-color: #fff;\\n    --theme-cell-border-color: #353b48;\\n    --theme-cell-border-width: 0.027;\\n    --theme-cell-text-color: #353b48;\\n    --theme-cell-font-size: 0.76em;\\n    --theme-cell-font-weight: 700;\\n    --theme-cell-void-color: #353b48;\\n\\n    --theme-number-font-size: 0.25em;\\n    --theme-number-font-weight: 100;\\n    --theme-number-color: #353b48;\\n  }\\n\\n  .theme-citrus {\\n    --theme-puzzle-border-color: #193939;\\n    --theme-puzzle-font: -apple-system, Helvetica, sans-serif;\\n\\n    --theme-clue-font: -apple-system, Helvetica, sans-serif;\\n    --theme-clue-text-color: #193939;\\n    --theme-clue-background-color: #fff;\\n    --theme-clue-scrollbar-bg: #ebf3f3;\\n    --theme-clue-scrollbar-fg: #c9d8d8;\\n    --theme-clue-puzzle-order: row;\\n    --theme-clue-list-width: 16em;\\n\\n    --theme-cell-highlight-color: #ffdfd5;\\n    --theme-cell-secondary-color: #ff957d;\\n    --theme-cell-bg-color: #fff;\\n    --theme-cell-border-color: #193939;\\n    --theme-cell-border-width: 0.01;\\n    --theme-cell-text-color: #193939;\\n    --theme-cell-font-size: 0.7em;\\n    --theme-cell-font-weight: 700;\\n    --theme-cell-void-color: #266b6b;\\n\\n    --theme-number-font-size: 0.3em;\\n    --theme-number-font-weight: 400;\\n    --theme-number-color: #266b6b;\\n  }\\n\\n  article {\\n    --puzzle-border-color: var(\\n      --theme-puzzle-border-color,\\n      var(--theme-puzzle-border-color)\\n    );\\n    --puzzle-font: var(--theme-puzzle-font, var(--theme-puzzle-font));\\n\\n    --clue-font: var(--theme-clue-font, var(--theme-clue-font));\\n    --clue-text-color: var(\\n      --theme-clue-text-color,\\n      var(--theme-clue-text-color)\\n    );\\n    --clue-background-color: var(\\n      --theme-clue-background-color,\\n      var(--theme-clue-background-color)\\n    );\\n    --clue-scrollbar-bg: var(\\n      --theme-clue-scrollbar-bg,\\n      var(--theme-clue-scrollbar-bg)\\n    );\\n    --clue-scrollbar-fg: var(\\n      --theme-clue-scrollbar-fg,\\n      var(--theme-clue-scrollbar-fg)\\n    );\\n    --clue-puzzle-order: var(\\n      --theme-clue-puzzle-order,\\n      var(--theme-clue-puzzle-order)\\n    );\\n    --clue-list-width: var(\\n      --theme-clue-list-width,\\n      var(--theme-clue-list-width)\\n    );\\n\\n    --cell-highlight-color: var(\\n      --theme-cell-highlight-color,\\n      var(--theme-cell-highlight-color)\\n    );\\n    --cell-secondary-color: var(\\n      --theme-cell-secondary-color,\\n      var(--theme-cell-secondary-color)\\n    );\\n    --cell-bg-color: var(--theme-cell-bg-color, var(--theme-cell-bg-color));\\n    --cell-border-color: var(\\n      --theme-cell-border-color,\\n      var(--theme-cell-border-color)\\n    );\\n    --cell-border-width: var(\\n      --theme-cell-border-width,\\n      var(--theme-cell-border-width)\\n    );\\n    --cell-text-color: var(\\n      --theme-cell-text-color,\\n      var(--theme-cell-text-color)\\n    );\\n    --cell-font-size: var(--theme-cell-font-size, var(--theme-cell-font-size));\\n    --cell-font-weight: var(\\n      --theme-cell-font-weight,\\n      var(--theme-cell-font-weight)\\n    );\\n    --cell-void-color: var(\\n      --theme-cell-void-color,\\n      var(--theme-cell-void-color)\\n    );\\n\\n    --number-font-size: var(\\n      --theme-number-font-size,\\n      var(--theme-number-font-size)\\n    );\\n    --number-font-weight: var(\\n      --theme-number-font-weight,\\n      var(--theme-number-font-weight)\\n    );\\n    --number-color: var(--theme-number-color, var(--theme-number-color));\\n\\n    position: relative;\\n    display: flex;\\n    flex-direction: var(--clue-puzzle-order, row);\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAkIE,cAAc,eAAC,CAAC,AACd,2BAA2B,CAAE,OAAO,CACpC,mBAAmB,CAAE,oCAAoC,CAEzD,iBAAiB,CAAE,oCAAoC,CACvD,uBAAuB,CAAE,OAAO,CAChC,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,GAAG,CAC9B,uBAAuB,CAAE,IAAI,CAE7B,4BAA4B,CAAE,OAAO,CACrC,4BAA4B,CAAE,OAAO,CACrC,qBAAqB,CAAE,IAAI,CAC3B,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,IAAI,CAC/B,uBAAuB,CAAE,OAAO,CAChC,sBAAsB,CAAE,KAAK,CAC7B,wBAAwB,CAAE,GAAG,CAC7B,uBAAuB,CAAE,OAAO,CAEhC,wBAAwB,CAAE,KAAK,CAC/B,0BAA0B,CAAE,GAAG,CAC/B,oBAAoB,CAAE,OAAO,AAC/B,CAAC,AAED,WAAW,eAAC,CAAC,AACX,2BAA2B,CAAE,OAAO,CACpC,mBAAmB,CAAE,oCAAoC,CAE3D,iBAAiB,CAAE,oCAAoC,CACrD,uBAAuB,CAAE,IAAI,CAC7B,6BAA6B,CAAE,OAAO,CACtC,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,GAAG,CAC9B,uBAAuB,CAAE,IAAI,CAE/B,4BAA4B,CAAE,IAAI,CAChC,4BAA4B,CAAE,OAAO,CACrC,qBAAqB,CAAE,OAAO,CAC9B,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,IAAI,CAC/B,uBAAuB,CAAE,IAAI,CAC7B,sBAAsB,CAAE,KAAK,CAC7B,wBAAwB,CAAE,GAAG,CAC7B,uBAAuB,CAAE,OAAO,CAElC,wBAAwB,CAAE,KAAK,CAC7B,0BAA0B,CAAE,GAAG,CAC/B,oBAAoB,CAAE,OAAO,AAC/B,CAAC,AAED,aAAa,eAAC,CAAC,AACb,2BAA2B,CAAE,OAAO,CACpC,mBAAmB,CAAE,oCAAoC,CAEzD,iBAAiB,CAAE,oCAAoC,CACvD,uBAAuB,CAAE,OAAO,CAChC,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,GAAG,CAC9B,uBAAuB,CAAE,IAAI,CAE7B,4BAA4B,CAAE,OAAO,CACrC,4BAA4B,CAAE,OAAO,CACrC,qBAAqB,CAAE,IAAI,CAC3B,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,KAAK,CAChC,uBAAuB,CAAE,OAAO,CAChC,sBAAsB,CAAE,MAAM,CAC9B,wBAAwB,CAAE,GAAG,CAC7B,uBAAuB,CAAE,OAAO,CAEhC,wBAAwB,CAAE,MAAM,CAChC,0BAA0B,CAAE,GAAG,CAC/B,oBAAoB,CAAE,OAAO,AAC/B,CAAC,AAED,aAAa,eAAC,CAAC,AACb,2BAA2B,CAAE,OAAO,CACpC,mBAAmB,CAAE,oCAAoC,CAEzD,iBAAiB,CAAE,oCAAoC,CACvD,uBAAuB,CAAE,OAAO,CAChC,6BAA6B,CAAE,IAAI,CACnC,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,GAAG,CAC9B,uBAAuB,CAAE,IAAI,CAE7B,4BAA4B,CAAE,OAAO,CACrC,4BAA4B,CAAE,OAAO,CACrC,qBAAqB,CAAE,IAAI,CAC3B,yBAAyB,CAAE,OAAO,CAClC,yBAAyB,CAAE,IAAI,CAC/B,uBAAuB,CAAE,OAAO,CAChC,sBAAsB,CAAE,KAAK,CAC7B,wBAAwB,CAAE,GAAG,CAC7B,uBAAuB,CAAE,OAAO,CAEhC,wBAAwB,CAAE,KAAK,CAC/B,0BAA0B,CAAE,GAAG,CAC/B,oBAAoB,CAAE,OAAO,AAC/B,CAAC,AAED,OAAO,eAAC,CAAC,AACP,qBAAqB,CAAE;;;KAGtB,CACD,aAAa,CAAE,kDAAkD,CAEjE,WAAW,CAAE,8CAA8C,CAC3D,iBAAiB,CAAE;;;KAGlB,CACD,uBAAuB,CAAE;;;KAGxB,CACD,mBAAmB,CAAE;;;KAGpB,CACD,mBAAmB,CAAE;;;KAGpB,CACD,mBAAmB,CAAE;;;KAGpB,CACD,iBAAiB,CAAE;;;KAGlB,CAED,sBAAsB,CAAE;;;KAGvB,CACD,sBAAsB,CAAE;;;KAGvB,CACD,eAAe,CAAE,sDAAsD,CACvE,mBAAmB,CAAE;;;KAGpB,CACD,mBAAmB,CAAE;;;KAGpB,CACD,iBAAiB,CAAE;;;KAGlB,CACD,gBAAgB,CAAE,wDAAwD,CAC1E,kBAAkB,CAAE;;;KAGnB,CACD,iBAAiB,CAAE;;;KAGlB,CAED,kBAAkB,CAAE;;;KAGnB,CACD,oBAAoB,CAAE;;;KAGrB,CACD,cAAc,CAAE,oDAAoD,CAEpE,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,IAAI,mBAAmB,CAAC,IAAI,CAAC,AAC/C,CAAC\"}"
};

const Crossword = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { data = [] } = $$props;
	let { revealed = false } = $$props;
	let { actions = ["reset", "reveal"] } = $$props;
	let { revealDuration = 1000 } = $$props;
	let { theme = "classic" } = $$props;
	let { disableHighlight = false } = $$props;
	let { showCompleteMessage = true } = $$props;
	let originalClues = createClues(data);
	let validated = validateClues(originalClues);
	let clues = originalClues.map(d => ({ ...d }));
	let cells = createCells(originalClues);
	let focusedDirection = "across";
	let focusedCellIndex = 0;
	let isRevealing = false;
	let revealTimeout;

	function checkClues() {
		return clues.map(d => {
			const index = d.index;

			const cellChecks = d.cells.map(c => {
				const { value } = cells.find(e => e.id === c.id);
				const hasValue = !!value;
				const hasCorrect = value === c.answer;
				return { hasValue, hasCorrect };
			});

			const isCorrect = cellChecks.filter(c => c.hasCorrect).length === d.answer.length;
			const isFilled = cellChecks.filter(c => c.hasValue).length === d.answer.length;
			return { ...d, isCorrect, isFilled };
		});
	}

	function clear() {
		isRevealing = false;
		focusedCellIndex = 0;
		focusedDirection = "across";
	}

	function onReset() {
		clear();
		if (revealTimeout) clearTimeout(revealTimeout);
		cells = cells.map(cell => ({ ...cell, value: "" }));
		revealed = false;
	}

	function onReveal() {
		if (revealed) return true;
		clear();
		cells = cells.map(cell => ({ ...cell, value: cell.answer }));
		revealed = true;
		startReveal();
	}

	function startReveal() {
		isRevealing = true;
		if (revealTimeout) clearTimeout(revealTimeout);

		revealTimeout = setTimeout(
			() => {
				isRevealing = false;
			},
			revealDuration + 250
		);
	}

	if ($$props.data === void 0 && $$bindings.data && data !== void 0) $$bindings.data(data);
	if ($$props.revealed === void 0 && $$bindings.revealed && revealed !== void 0) $$bindings.revealed(revealed);
	if ($$props.actions === void 0 && $$bindings.actions && actions !== void 0) $$bindings.actions(actions);
	if ($$props.revealDuration === void 0 && $$bindings.revealDuration && revealDuration !== void 0) $$bindings.revealDuration(revealDuration);
	if ($$props.theme === void 0 && $$bindings.theme && theme !== void 0) $$bindings.theme(theme);
	if ($$props.disableHighlight === void 0 && $$bindings.disableHighlight && disableHighlight !== void 0) $$bindings.disableHighlight(disableHighlight);
	if ($$props.showCompleteMessage === void 0 && $$bindings.showCompleteMessage && showCompleteMessage !== void 0) $$bindings.showCompleteMessage(showCompleteMessage);
	$$result.css.add(css$8);
	let $$settled;
	let $$rendered;

	do {
		$$settled = true;
		let focusedCell;
		let cellIndexMap;
		let percentCorrect;
		let isComplete;
		let themeClass;
		let isDisableHighlight;
		focusedCell = cells[focusedCellIndex] || {};
		cellIndexMap = fromPairs(cells.map(cell => [cell.id, cell.index]));
		percentCorrect = cells.filter(d => d.answer === d.value).length / cells.length;
		isComplete = percentCorrect == 1;
		themeClass = theme ? `theme-${theme}` : "";
		isDisableHighlight = isComplete && disableHighlight;

		 {
			(clues = checkClues());
		}

		$$rendered = `${slots.toolbar
		? slots.toolbar({ onReset, onReveal })
		: `
  ${validate_component(Toolbar, "Toolbar").$$render($$result, { actions }, {}, {})}
`}

<article class="${"crossword " + escape(themeClass) + " svelte-193oi9r"}">${validated
		? `${validate_component(Clues, "Clues").$$render(
				$$result,
				{
					clues,
					cellIndexMap,
					focusedCellIndex,
					focusedCell,
					focusedDirection
				},
				{
					focusedCellIndex: $$value => {
						focusedCellIndex = $$value;
						$$settled = false;
					},
					focusedCell: $$value => {
						focusedCell = $$value;
						$$settled = false;
					},
					focusedDirection: $$value => {
						focusedDirection = $$value;
						$$settled = false;
					}
				},
				{}
			)}
    ${validate_component(Puzzle, "Puzzle").$$render(
				$$result,
				{
					clues,
					focusedCell,
					isRevealing,
					isDisableHighlight,
					revealDuration,
					cells,
					focusedCellIndex,
					focusedDirection
				},
				{
					cells: $$value => {
						cells = $$value;
						$$settled = false;
					},
					focusedCellIndex: $$value => {
						focusedCellIndex = $$value;
						$$settled = false;
					},
					focusedDirection: $$value => {
						focusedDirection = $$value;
						$$settled = false;
					}
				},
				{}
			)}`
		: ``}

  ${isComplete && !isRevealing && showCompleteMessage
		? `${validate_component(CompletedMessage, "CompletedMessage").$$render($$result, {}, {}, {
				default: () => `${slots.complete ? slots.complete({}) : ``}`
			})}`
		: ``}
</article>`;
	} while (!$$settled);

	return $$rendered;
});

var dataNYT = [
	{
		clue: "The 1% of 1% milk",
		answer: "FAT",
		direction: "across",
		x: 2,
		y: 0
	},
	{
		clue: "Flicker of light",
		answer: "GLINT",
		direction: "across",
		x: 0,
		y: 1
	},
	{
		clue: "Really neat",
		answer: "NIFTY",
		direction: "across",
		x: 0,
		y: 2
	},
	{
		clue: "\"__ we meet again\"",
		answer: "UNTIL",
		direction: "across",
		x: 0,
		y: 3
	},
	{
		clue: "It's way over your head",
		answer: "SKY",
		direction: "across",
		x: 0,
		y: 4
	},
	{
		clue: "Point bonus for using all seven tiles in Scrabble",
		answer: "FIFTY",
		direction: "down",
		x: 2,
		y: 0
	},
	{
		clue: "Opposite of pro-",
		answer: "ANTI",
		direction: "down",
		x: 3,
		y: 0
	},
	{
		clue: "Texter's \"gotta run\"",
		answer: "TTYL",
		direction: "down",
		x: 4,
		y: 0
	},
	{
		clue: "Migratory antelopes",
		answer: "GNUS",
		direction: "down",
		x: 0,
		y: 1
	},
	{
		clue: "Clickable part of a webpage",
		answer: "LINK",
		direction: "down",
		x: 1,
		y: 1
	}
];

var dataOreo = [
	{
		clue: "Black-and-white cookie",
		answer: "OREO",
		direction: "down",
		x: 0,
		y: 0
	},
	{
		clue: "Popular cookie",
		answer: "OREO",
		direction: "down",
		x: 3,
		y: 0
	},
	{
		clue: "Creme-filled cookie",
		answer: "OREO",
		direction: "across",
		x: 0,
		y: 3
	},
	{
		clue: "Sandwich cookie",
		answer: "OREO",
		direction: "across",
		x: 0,
		y: 0
	}
];

var dataUSA = [
	{
		answer: "BARRYMORE",
		clue: "\"Whip It\" director Drew",
		direction: "across",
		x: 0,
		y: 0,
		custom: "woman"
	},
	{
		answer: "DAHL",
		clue: "\"Journey to the Center of the Earth\" star Arlene",
		direction: "across",
		x: 9,
		y: 1,
		custom: "woman"
	},
	{
		answer: "LETITIA",
		clue: "\"Black Panther\" actress Wright",
		direction: "across",
		x: 0,
		y: 2,
		custom: "woman"
	},
	{
		answer: "RIHANNA",
		clue: "\"Disturbia\" singer",
		direction: "across",
		x: 6,
		y: 3,
		custom: "woman"
	},
	{
		answer: "DIRK",
		clue: "Dallas Mavericks great Nowitzki",
		direction: "across",
		x: 3,
		y: 4,
		custom: "man"
	},
	{
		answer: "HANNAH",
		clue: "Oscar winner Beachler",
		direction: "across",
		x: 6,
		y: 5,
		custom: "woman"
	},
	{
		answer: "GEORGIA",
		clue: "Painter with a museum in Santa Fe",
		direction: "across",
		x: 0,
		y: 6,
		custom: "woman"
	},
	{
		answer: "LIZZO",
		clue: "\"Cuz I Love You\" singer",
		direction: "across",
		x: 8,
		y: 7,
		custom: "woman"
	},
	{
		answer: "LEVY",
		clue: "TV star Dan",
		direction: "across",
		x: 3,
		y: 8,
		custom: "man"
	},
	{
		answer: "RAE",
		clue: "\"The Misadventures of Awkward Black Girl\" author Issa",
		direction: "across",
		x: 0,
		y: 9,
		custom: "woman"
	},
	{
		answer: "ALBERT",
		clue: "Slugger Pujols",
		direction: "across",
		x: 6,
		y: 9,
		custom: "man"
	},
	{
		answer: "TRACE",
		clue: "\"Hustlers\" actress Lysette",
		direction: "across",
		x: 0,
		y: 11,
		custom: "woman"
	},
	{
		answer: "OHENRY",
		clue: "\"The Gift of the Magi\" author",
		direction: "across",
		x: 5,
		y: 12,
		custom: "man"
	},
	{
		answer: "BELLA",
		clue: "Actress Thorne",
		direction: "down",
		x: 0,
		y: 0,
		custom: "woman"
	},
	{
		answer: "RITA",
		clue: "Acting legend Moreno",
		direction: "down",
		x: 2,
		y: 0,
		custom: "woman"
	},
	{
		answer: "OMARKHAYYAM",
		clue: "Persian poet, astronomer, mathematician",
		direction: "down",
		x: 6,
		y: 0,
		custom: "man"
	},
	{
		answer: "ALIA",
		clue: "\"Search Party\" star Shawkat",
		direction: "down",
		x: 12,
		y: 0,
		custom: "woman"
	},
	{
		answer: "DUA",
		clue: "\"New Rules\" singer Lipa",
		direction: "down",
		x: 9,
		y: 1,
		custom: "woman"
	},
	{
		answer: "NIA",
		clue: "\"In Too Deep\" actress Long",
		direction: "down",
		x: 10,
		y: 3,
		custom: "woman"
	},
	{
		answer: "DARYL",
		clue: "Actress ___ Hannah",
		direction: "down",
		x: 3,
		y: 4,
		custom: "woman"
	},
	{
		answer: "LEBRON",
		clue: "NBA star James",
		direction: "down",
		x: 8,
		y: 7,
		custom: "man"
	},
	{
		answer: "GRETA",
		clue: "Director Gerwig",
		direction: "down",
		x: 0,
		y: 8,
		custom: "woman"
	},
	{
		answer: "ELLE",
		clue: "\"Ex's & Oh's\" singer King",
		direction: "down",
		x: 4,
		y: 8,
		custom: "woman"
	},
	{
		answer: "EVA",
		clue: "Model Marcille",
		direction: "down",
		x: 2,
		y: 9,
		custom: "woman"
	},
	{
		answer: "TAN",
		clue: "Fashion expert France",
		direction: "down",
		x: 11,
		y: 9,
		custom: "man"
	}
];

/* src/example/App.svelte generated by Svelte v3.29.0 */

const css$9 = {
	code: "article.svelte-1y2vm2o{font-family:sans-serif}section.svelte-1y2vm2o{max-width:960px;margin:5em auto}h1.svelte-1y2vm2o{margin:0;font-size:2em;max-width:640px}p.svelte-1y2vm2o{max-width:640px;margin:1em 0}",
	map: "{\"version\":3,\"file\":\"App.svelte\",\"sources\":[\"App.svelte\"],\"sourcesContent\":[\"<script>\\n  import Crossword from \\\"../Crossword.svelte\\\";\\n  import dataNYT from \\\"./data-nyt.json\\\";\\n  import dataOreo from \\\"./data-oreo.json\\\";\\n  import dataAmelia from \\\"./data-amelia.json\\\";\\n  import dataUSA from \\\"./data-usa.json\\\";\\n\\n  let revealedUSA;\\n  let theme;\\n</script>\\n\\n<article>\\n  <section class=\\\"nyt\\\">\\n    <h1>NYT Mini</h1>\\n    <p>Default options.</p>\\n    <Crossword data=\\\"{dataNYT}\\\" />\\n  </section>\\n\\n  <section class=\\\"amelia\\\">\\n    <h1>Oreo</h1>\\n    <p>Custom themes</p>\\n    <select bind:value=\\\"{theme}\\\">\\n      <option value=\\\"classic\\\">Classic</option>\\n      <option value=\\\"dark\\\">Dark</option>\\n      <option value=\\\"amelia\\\">Amelia</option>\\n      <option value=\\\"citrus\\\">Citrus</option>\\n    </select>\\n    <div style=\\\"{theme == 'dark' ? 'background: black; color: white' : ''}\\\">\\n      <Crossword data=\\\"{dataOreo}\\\" theme=\\\"{theme}\\\" showCompleteMessage=\\\"{false}\\\" />\\n    </div>\\n  </section>\\n\\n  <section class:is-revealed=\\\"{revealedUSA}\\\" class=\\\"usa\\\">\\n    <h1>People in USA Today puzzles</h1>\\n    <p>Custom class name on cells.</p>\\n    <Crossword data=\\\"{dataUSA}\\\" bind:revealed=\\\"{revealedUSA}\\\" />\\n  </section>\\n\\n  <section>\\n    <h1>People in USA Today puzzles</h1>\\n    <p>Custom completed content.</p>\\n    <Crossword data=\\\"{dataUSA}\\\">\\n      <div\\n        class=\\\"toolbar\\\"\\n        slot=\\\"toolbar\\\"\\n        let:onReset\\n\\t\\t\\t\\tlet:onReveal\\n        style=\\\"background: yellow; padding: 2em;\\\">\\n        <button on:click=\\\"{onReset}\\\">reset</button>\\n        <button on:click=\\\"{onReveal}\\\">reveal</button>\\n      </div>\\n      <img\\n        slot=\\\"complete\\\"\\n        alt=\\\"celebration\\\"\\n        src=\\\"https://media3.giphy.com/media/QpOZPQQ2wbjOM/giphy.gif\\\" />\\n    </Crossword>\\n  </section>\\n</article>\\n\\n<style>\\n  article {\\n    font-family: sans-serif;\\n  }\\n  section {\\n    max-width: 960px;\\n    margin: 5em auto;\\n  }\\n  h1 {\\n    margin: 0;\\n    font-size: 2em;\\n    max-width: 640px;\\n  }\\n  p {\\n    max-width: 640px;\\n    margin: 1em 0;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AA4DE,OAAO,eAAC,CAAC,AACP,WAAW,CAAE,UAAU,AACzB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,IAAI,AAClB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,GAAG,CACd,SAAS,CAAE,KAAK,AAClB,CAAC,AACD,CAAC,eAAC,CAAC,AACD,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,CAAC,AACf,CAAC\"}"
};

const App = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let revealedUSA;
	let theme;
	$$result.css.add(css$9);
	let $$settled;
	let $$rendered;

	do {
		$$settled = true;

		$$rendered = `<article class="${"svelte-1y2vm2o"}"><section class="${"nyt svelte-1y2vm2o"}"><h1 class="${"svelte-1y2vm2o"}">NYT Mini</h1>
    <p class="${"svelte-1y2vm2o"}">Default options.</p>
    ${validate_component(Crossword, "Crossword").$$render($$result, { data: dataNYT }, {}, {})}</section>

  <section class="${"amelia svelte-1y2vm2o"}"><h1 class="${"svelte-1y2vm2o"}">Oreo</h1>
    <p class="${"svelte-1y2vm2o"}">Custom themes</p>
    <select${add_attribute("value", theme, 1)}><option value="${"classic"}">Classic</option><option value="${"dark"}">Dark</option><option value="${"amelia"}">Amelia</option><option value="${"citrus"}">Citrus</option></select>
    <div${add_attribute("style",  "", 0)}>${validate_component(Crossword, "Crossword").$$render(
			$$result,
			{
				data: dataOreo,
				theme,
				showCompleteMessage: false
			},
			{},
			{}
		)}</div></section>

  <section class="${["usa svelte-1y2vm2o", revealedUSA ? "is-revealed" : ""].join(" ").trim()}"><h1 class="${"svelte-1y2vm2o"}">People in USA Today puzzles</h1>
    <p class="${"svelte-1y2vm2o"}">Custom class name on cells.</p>
    ${validate_component(Crossword, "Crossword").$$render(
			$$result,
			{ data: dataUSA, revealed: revealedUSA },
			{
				revealed: $$value => {
					revealedUSA = $$value;
					$$settled = false;
				}
			},
			{}
		)}</section>

  <section class="${"svelte-1y2vm2o"}"><h1 class="${"svelte-1y2vm2o"}">People in USA Today puzzles</h1>
    <p class="${"svelte-1y2vm2o"}">Custom completed content.</p>
    ${validate_component(Crossword, "Crossword").$$render($$result, { data: dataUSA }, {}, {
			toolbar: ({ onReset, onReveal }) => `<div class="${"toolbar"}" slot="${"toolbar"}" style="${"background: yellow; padding: 2em;"}"><button>reset</button>
        <button>reveal</button></div>`,
			complete: () => `<img slot="${"complete"}" alt="${"celebration"}" src="${"https://media3.giphy.com/media/QpOZPQQ2wbjOM/giphy.gif"}">`,
			default: () => `
      `
		})}</section>
</article>`;
	} while (!$$settled);

	return $$rendered;
});

module.exports = App;
